<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C语言-指针详解</title>
      <link href="/2023/03/27/%E6%8C%87%E9%92%88%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/03/27/%E6%8C%87%E9%92%88%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="1：指针是什么？"><a href="#1：指针是什么？" class="headerlink" title="1：指针是什么？"></a>1：指针是什么？</h2><p>在计算机科学中，指针是变成语言中的一个对象，利用地址，它的值直接指向电脑存储器中另一个地方的值，由于通过地址能够找到所需要的变量单元，可以说，<code>地址指向该变量单元</code>，因此称之为指针，意思是通过它可以找到以它为地址的内存单元</p><h2 id="2：指针变量"><a href="#2：指针变量" class="headerlink" title="2：指针变量"></a>2：指针变量</h2><p>指针是用来存放地址的，地址是唯一标识一块地址空间的</p><p>指针的大小在32位平台上是4字节，在64位平台上是8字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;  <span class="comment">//a为int类型，占4个字节</span></span><br><span class="line"><span class="type">int</span> * pa = &amp;a;<span class="comment">//拿到的是a的四个字节中第一个字节的地址</span></span><br><span class="line"><span class="comment">//int表示类型，*pa表示是一个指针，存放地址的变量称之为指针变量</span></span><br><span class="line">*pa = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);  <span class="comment">//结果为20</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3：指针和指针类型"><a href="#3：指针和指针类型" class="headerlink" title="3：指针和指针类型"></a>3：指针和指针类型</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针和指针类型</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>* pa;</span><br><span class="line"><span class="type">char</span>* pc;</span><br><span class="line"><span class="type">float</span>* pf;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(pa));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(pc));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(pf));  <span class="comment">//结果均为4</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指针类型的意义</p><ul><li>int类型解引用可以访问四个字节，char类型只能访问1个字节</li><li>指针类型决定了指针解引用的权限有多大</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针类型的意义</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0x11223344</span>;</span><br><span class="line"><span class="type">int</span> * pa = &amp;a;  <span class="comment">//int类型解引用可以访问四个字节，char类型只能访问1个字节</span></span><br><span class="line"><span class="comment">//指针类型决定了指针解引用的权限有多大</span></span><br><span class="line">*pa = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *pa);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指针类型决定了指针走一步能走多远</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span>* p = arr; <span class="comment">//整型指针+4</span></span><br><span class="line"><span class="type">char</span>* pc = arr; <span class="comment">//字符指针+1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, p);  <span class="comment">//010FF6B8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, p+<span class="number">1</span>); <span class="comment">//010FF6BC</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, pc); <span class="comment">//010FF6B8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, pc+<span class="number">1</span>); <span class="comment">//010FF6B9</span></span><br><span class="line"><span class="comment">//指针类型决定了指针走一步能走多远</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针类型的意义</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//int* p = arr; //当成一个整型来访问</span></span><br><span class="line"><span class="type">char</span>* p = arr;  <span class="comment">//一个字节一个字节访问</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">*(p + i) = <span class="number">1</span>; <span class="comment">//其实是下标为i的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4：野指针"><a href="#4：野指针" class="headerlink" title="4：野指针"></a>4：野指针</h2><h3 id="1）野指针"><a href="#1）野指针" class="headerlink" title="1）野指针"></a>1）野指针</h3><p>野指针就是指针指向的位置是不可知的（随机的，不正确的，没有明确限制的）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//野指针</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>* p;  <span class="comment">//是一个局部的指针变量，局部变量不初始化的话，默认是随机值</span></span><br><span class="line"><span class="comment">//将p称为野指针</span></span><br><span class="line">*p = <span class="number">20</span>;  <span class="comment">//非法访问内存</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/image-20230327113132441.png" alt="image-20230327113132441"></p><h3 id="2）越界访问"><a href="#2）越界访问" class="headerlink" title="2）越界访问"></a>2）越界访问</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//越界访问</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;  <span class="comment">//数组存在10个元素</span></span><br><span class="line"><span class="type">int</span>* p = arr;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) <span class="comment">//循环11次，但数组下标从0开始，最大到9，但到10的时候就是越界</span></span><br><span class="line">&#123;</span><br><span class="line">*p - <span class="number">1</span>;</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）指针指向的地址空间释放"><a href="#3）指针指向的地址空间释放" class="headerlink" title="3）指针指向的地址空间释放"></a>3）指针指向的地址空间释放</h3><p>即变量已经释放，但指针仍旧将地址指向变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针指向的空间地址被释放</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span>* <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">return</span> &amp;a;  <span class="comment">//出函数变量销毁，进入的时候创建</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>* p = test();</span><br><span class="line">*p = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4）避免野指针的出出现"><a href="#4）避免野指针的出出现" class="headerlink" title="4）避免野指针的出出现"></a>4）避免野指针的出出现</h3><ol><li>指针初始化（对于任何变量都建议初始化），初始化为随机值</li></ol><p>   当前不知道p应该初始化成什么的时候，应初始化成空值</p>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> * p = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>   明确知道初始化的值</p>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> * p = &amp;a;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>注意指针越界（C语言本身不会检测越界行为）</p></li><li><p>指针指向空间释放及时，可以置为NULL</p></li><li><p>指针使用之前先检查有效性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> （p!=<span class="literal">NULL</span>） <span class="comment">//指针不为空指针的时候在使用，否则则不适用</span></span><br><span class="line">&#123;</span><br><span class="line">*p=<span class="number">10</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="5：指针的运算"><a href="#5：指针的运算" class="headerlink" title="5：指针的运算"></a>5：指针的运算</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">指针+整数</span><br><span class="line">指针-指针</span><br><span class="line">指针的关系运算（比较大小）</span><br></pre></td></tr></table></figure><h3 id="1）指针的相加"><a href="#1）指针的相加" class="headerlink" title="1）指针的相加"></a>1）指针的相加</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针的运算</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span>* p = arr;</span><br><span class="line"><span class="type">int</span>* pend = arr + <span class="number">9</span>;</span><br><span class="line"><span class="keyword">while</span> (p &lt;= pend)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *p);</span><br><span class="line">p++;  <span class="comment">//p加减整数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）指针的相减"><a href="#2）指针的相减" class="headerlink" title="2）指针的相减"></a>2）指针的相减</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针的相减</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="comment">//指针和指针相减的前提是两个指针指向同一块空间</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, &amp;arr[<span class="number">9</span>] - &amp;arr[<span class="number">0</span>]); <span class="comment">//结果为9</span></span><br><span class="line"><span class="comment">//指针减去指针得到的两个指针之间的元素的个数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）利用指针求字符串的长度"><a href="#3）利用指针求字符串的长度" class="headerlink" title="3）利用指针求字符串的长度"></a>3）利用指针求字符串的长度</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//利用指针实现求字符串长度</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//int my_strlen(char * str)  //自定义函数，计数器方法，还有递归的方法</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int count = 0;</span></span><br><span class="line"><span class="comment">//while (*str != &#x27;\0&#x27;)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//count++;</span></span><br><span class="line"><span class="comment">//str++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return count;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//指针方法---指针与指针相减为中间的个数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_strlen</span><span class="params">(<span class="type">char</span>* str)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* start = str;  <span class="comment">//初始字符地址</span></span><br><span class="line"><span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">str++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str - start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> len = my_strlen(<span class="string">&quot;abc&quot;</span>);  <span class="comment">//求字符串的长度,传递的是首字母a的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, len);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c语言标准规定，允许指向数组元素的指针与指向数组的最后一个元素后面的哪个内存位置的指针比较，但是不允许与指向第一个元素的哪个内存位置的指针进行比较</p><h2 id="6：指针和数组"><a href="#6：指针和数组" class="headerlink" title="6：指针和数组"></a>6：指针和数组</h2><p>数组名就是数组首元素的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针和数组</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr);  <span class="comment">//两个打印的结果意义，%p打印地址</span></span><br><span class="line"><span class="comment">//数组名代表数组首元素的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span>* p = arr;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf(&quot;%p&lt;---&gt;%p\n&quot;, p + i); //p+i产生的是i的地址</span></span><br><span class="line">*(p + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(p + i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span>* p = arr;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, arr[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">//两种方法实现结果一样</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">2</span>[arr]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, arr[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">//两种写法最终结果一样</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7：二级指针"><a href="#7：二级指针" class="headerlink" title="7：二级指针"></a>7：二级指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二级指针</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* pa = &amp;a;  <span class="comment">//pa是只恨变量。一级指针</span></span><br><span class="line"><span class="type">int</span>* *ppa = &amp;pa; <span class="comment">//pa也是个变暖了，&amp;pa取出pa在内存中起始地址</span></span><br><span class="line"><span class="comment">//int* ppa的指针</span></span><br><span class="line"><span class="comment">//*ppa标识ppa是一个二级指针变量</span></span><br><span class="line"><span class="comment">//二级指针解引用两次得到最初地址</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8：指针数组"><a href="#8：指针数组" class="headerlink" title="8：指针数组"></a>8：指针数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针数组，本质上是数组</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mian</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">//整型数组--存放整型的数组就是整型数组</span></span><br><span class="line"><span class="type">char</span> ch[<span class="number">5</span>]; <span class="comment">//字符数组---存放的是字符</span></span><br><span class="line"><span class="type">int</span>* parr[<span class="number">5</span>]; <span class="comment">//定义一个整型指针的数组</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c-learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 c-learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言-操作符详解</title>
      <link href="/2023/03/27/%E6%93%8D%E4%BD%9C%E7%AC%A6%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/03/27/%E6%93%8D%E4%BD%9C%E7%AC%A6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="1：算数操作符"><a href="#1：算数操作符" class="headerlink" title="1：算数操作符"></a>1：算数操作符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+，-，*，/，%</span><br></pre></td></tr></table></figure><p><code>对于除法，需要除数和被除数至少有一个为小数才可以结果为精确小数</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//算数操作符</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span> / <span class="number">5</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);  <span class="comment">//结果为0，取整数位</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> b = <span class="number">6</span> / <span class="number">5.0</span>;<span class="comment">//如果有一个为小数，则结果为1.20000，否则就为1.00000</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, b); <span class="comment">//结果为1.00000，</span></span><br><span class="line"><span class="comment">//对于除法，需要除数和被除数至少有一个为小数才可以结果为精确小数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>%操作符的两个数必须为整数</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//算数操作符---取模</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">7</span> % <span class="number">3</span>;  <span class="comment">//取模表示除后余数，7/3=2---1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2：移位操作符"><a href="#2：移位操作符" class="headerlink" title="2：移位操作符"></a>2：移位操作符</h2><p>2的二进制：00000000000000000000000000000010<br>左移后：   00000000000000000000000000000100 —转换后位4<br>左移操作符的特点：左边丢弃，右边补0<br>右移后：00000000000000000000000000000001—转换后为1<br>右移操作符的特点：<br>    1：算数右移，右边丢弃，左边补原符号位<br>    2：逻辑右移：右边丢弃，左边补0</p><p><code>对于正整数来说，原码、反码补码相同</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于负数来水</span></span><br><span class="line">负数<span class="number">-1</span>存放在内存种</span><br><span class="line">整数的二进制表示形式，有三种</span><br><span class="line">原码：直接根据数值写出的二进制序列就是原码</span><br><span class="line">反码：原码的符号位不变，其他位按位取反就是反码</span><br><span class="line">补码：反码+<span class="number">1</span>，就是补码</span><br><span class="line"></span><br><span class="line"><span class="number">-1</span></span><br><span class="line">原码：<span class="number">100000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> <span class="comment">//实际打印结果</span></span><br><span class="line">反码：<span class="number">111111111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111110</span>  <span class="comment">//高位1表示复数</span></span><br><span class="line">补码：<span class="number">111111111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="comment">//内存中存储</span></span><br><span class="line"></span><br><span class="line">此时向由移位<span class="number">1</span>后</span><br><span class="line">    逻辑右移：最高位为补<span class="number">0</span></span><br><span class="line">    算数右移：补原符号位，这里即负数即<span class="number">1</span></span><br></pre></td></tr></table></figure><p>左移右移操作符不会对原数造成影响，仅改变移动后的变量的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移位操作符</span></span><br><span class="line"><span class="comment">//&lt;&lt;:左移操作符  &gt;&gt;：右移操作符</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> b = a &lt;&lt; <span class="number">1</span>; <span class="comment">//将a的二进制位向左移位</span></span><br><span class="line"><span class="type">int</span> c = a &gt;&gt; <span class="number">1</span>; <span class="comment">//将a的二进制位向右移位</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2的二进制：00000000000000000000000000000010</span></span><br><span class="line"><span class="comment">左移后：   00000000000000000000000000000100 ---转换后位4</span></span><br><span class="line"><span class="comment">左移操作符的特点：左边丢弃，右边补0</span></span><br><span class="line"><span class="comment">右移后：00000000000000000000000000000001---转换后为1</span></span><br><span class="line"><span class="comment">右移操作符的特点：</span></span><br><span class="line"><span class="comment">1：算数右移，右边丢弃，左边补原符号位</span></span><br><span class="line"><span class="comment">2：逻辑右移：右边丢弃，左边补0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b=%d\n&quot;</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c=%d\n&quot;</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3：位操作符"><a href="#3：位操作符" class="headerlink" title="3：位操作符"></a>3：位操作符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp; 按位与：二进制结果相同的填相同数字，不同填<span class="number">0</span></span><br><span class="line">| 按位或：二进制位有一个为真则结果为真</span><br><span class="line">^ 按位异或：对应的二进制位进行异或--相同位<span class="number">0</span>，相异为<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="1）按位与"><a href="#1）按位与" class="headerlink" title="1）按位与"></a>1）按位与</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&amp;按位与</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> c = a &amp; b; <span class="comment">//按位与，二进制位</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3：00000000000000000000000000000011</span></span><br><span class="line"><span class="comment">5：00000000000000000000000000000101</span></span><br><span class="line"><span class="comment">按位与：00000000000000000000000000000001---结果为1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>,c);  <span class="comment">//打印1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）-按位或"><a href="#2）-按位或" class="headerlink" title="2）|按位或"></a>2）|按位或</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// |按位或</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> c = a | b; <span class="comment">//按位或，二进制位</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3：00000000000000000000000000000011</span></span><br><span class="line"><span class="comment">5：00000000000000000000000000000101</span></span><br><span class="line"><span class="comment">按位与：00000000000000000000000000000111 //即有一个为真则结果为真，结果为7</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c=%d\n&quot;</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）按位异或"><a href="#3）按位异或" class="headerlink" title="3）按位异或^"></a>3）按位异或^</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按位异或^</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> c = a ^ b; <span class="comment">//二进制位</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3：00000000000000000000000000000011</span></span><br><span class="line"><span class="comment">5：00000000000000000000000000000101</span></span><br><span class="line"><span class="comment">按位异或：00000000000000000000000000000110--结果为6</span></span><br><span class="line"><span class="comment">对应的二进制位进行异或--相同位0，相异为1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c=%d\n&quot;</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任何相同的数字异或为0，0和任何数字异或为数字本身</p><h3 id="4）示例"><a href="#4）示例" class="headerlink" title="4）示例"></a>4）示例</h3><p>不适用第三个变量，交换两个变量的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//应用，交换变量的值</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d b=%d\n&quot;</span>, a, b);</span><br><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b; <span class="comment">//异或运算相同为0，相异为1，可展开成二进制进行观察</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d b=%d\n&quot;</span>, a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4：赋值操作符"><a href="#4：赋值操作符" class="headerlink" title="4：赋值操作符"></a>4：赋值操作符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=，+=，-+，/=,&gt;&gt;=-,&lt;&lt;=,%=，&amp;=，|=，^=</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">a = a + <span class="number">100</span>;</span><br><span class="line">a += <span class="number">100</span>;<span class="comment">//两种方式实现结果一样</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>一个=位赋值，==表示判断</code></p><h2 id="5：单目操作符"><a href="#5：单目操作符" class="headerlink" title="5：单目操作符"></a>5：单目操作符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">！，-，=，&amp;，++，--，*,（类型），<span class="keyword">sizeof</span></span><br></pre></td></tr></table></figure><h3 id="1）！逻辑反"><a href="#1）！逻辑反" class="headerlink" title="1）！逻辑反"></a>1）！逻辑反</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单目操作符--只有一个操作数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">if</span> (flag)  <span class="comment">//flag为真的时候打印</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;haha\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag)  <span class="comment">//当flag为假的时候打印</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将指定的一位数更改位其他</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">13</span>;</span><br><span class="line">a = a | (<span class="number">1</span> &lt;&lt; <span class="number">4</span>);</span><br><span class="line"><span class="comment">//00000000000000000000000000001101将第27位改成1</span></span><br><span class="line"><span class="comment">//00000000000000000000000000010000</span></span><br><span class="line"><span class="comment">//00000000000000000000000000011101</span></span><br><span class="line"><span class="comment">//将1向左移动4位，按位或1即可</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d\n&quot;</span>, a);  <span class="comment">//结果为29</span></span><br><span class="line"><span class="comment">//将a的二进制位中的第5位置0</span></span><br><span class="line">a = a &amp; ~(<span class="number">1</span> &lt;&lt; <span class="number">4</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d\n&quot;</span>, a);  <span class="comment">//结果为13</span></span><br><span class="line"><span class="comment">//00000000000000000000000000011101</span></span><br><span class="line"><span class="comment">//11111111111111111111111111101101</span></span><br><span class="line"><span class="comment">//0000000000000000000000000010000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）-负值，-正值"><a href="#2）-负值，-正值" class="headerlink" title="2）-负值，+正值"></a>2）-负值，+正值</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-负值，+正值</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">-5</span>;</span><br><span class="line">a = -a;  <span class="comment">//负值</span></span><br><span class="line">b = +<span class="number">5</span>;  <span class="comment">//正值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）sizeof操作符"><a href="#3）sizeof操作符" class="headerlink" title="3）sizeof操作符"></a>3）sizeof操作符</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sizeof是一个操作符</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(a));  <span class="comment">//计算a的大小</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span> a);  <span class="comment">//计算变量的大小的时候可以省略（）</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>)); <span class="comment">//计算int的大小</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr)); <span class="comment">//计算数组的大小，类型为int，一个int类型4个字节，10个即为40字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span> [<span class="number">10</span>]));<span class="comment">//int[10]是arr数组的类型</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组的大小</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test1</span><span class="params">(<span class="type">int</span> arr[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">(<span class="type">char</span> ch[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(ch));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里计算的都是传递过去的都是地址的大小，即指针的大小，在x64和x86怕平台上不一样，x64上为8，x86上为4</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">char</span> ch[] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(ch));</span><br><span class="line">test1(arr);</span><br><span class="line">test2(ch);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4）-按位取反"><a href="#4）-按位取反" class="headerlink" title="4）~按位取反"></a>4）~按位取反</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">//100000000000000000000000000000001 --原码</span></span><br><span class="line"><span class="comment">//111111111111111111111111111111110 --反码</span></span><br><span class="line"><span class="comment">//111111111111111111111111111111111  --补码</span></span><br><span class="line"><span class="comment">//~按位取反,对补码进行取反</span></span><br><span class="line"><span class="comment">//111111111111111111111111111111111</span></span><br><span class="line"><span class="comment">//000000000000000000000000000000000 --补码取反</span></span><br><span class="line"><span class="type">int</span> b = ~a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5）-与–"><a href="#5）-与–" class="headerlink" title="5）++与–"></a>5）++与–</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//++与--</span></span><br><span class="line"><span class="comment">//--与++的使用方法一样，前置--先--在使用，后置--先使用在减</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//int b = a++;  //后置++，先使用，在相加赋值</span></span><br><span class="line"><span class="type">int</span> c = ++a;  <span class="comment">//前置++。先++，在使用</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, b);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6）-amp-取地址与"><a href="#6）-amp-取地址与" class="headerlink" title="6）&amp;取地址与*"></a>6）&amp;取地址与*</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *pa = &amp;a; <span class="comment">//pa是用来存放地址的，即为指针变量,*pa表示其为指针变量</span></span><br><span class="line"><span class="comment">//a的类型为什么。前面就需要写什么类型</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取地址与*</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp; a);<span class="comment">//取地址操作符取出a的值,%p打印地址</span></span><br><span class="line"><span class="type">int</span> *pa = &amp;a; <span class="comment">//pa是用来存放地址的，即为指针变量,*pa表示其为指针变量</span></span><br><span class="line"><span class="comment">//a的类型为什么。前面就需要写什么类型</span></span><br><span class="line">*pa = <span class="number">20</span>;<span class="comment">//解引用操作符--间接引用操作符，即将a改成20</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);  <span class="comment">//结果为20</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7）强制类型转换"><a href="#7）强制类型转换" class="headerlink" title="7）强制类型转换"></a>7）强制类型转换</h3><p><code>（类型）</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（类型）--强制类型转换</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = (<span class="type">int</span>)<span class="number">3.14</span>; <span class="comment">//将3.14浮点数强制类型转换成int类型</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6：关系操作符"><a href="#6：关系操作符" class="headerlink" title="6：关系操作符"></a>6：关系操作符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;,&gt;=,&lt;,&lt;=,!=,==</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关系操作符</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">if</span> (a != b) <span class="comment">//判断</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a!=b\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a &lt;= b) <span class="comment">//判断</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a&lt;=b\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7：逻辑操作符"><a href="#7：逻辑操作符" class="headerlink" title="7：逻辑操作符"></a>7：逻辑操作符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp; 逻辑与</span><br><span class="line">|| 逻辑或</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逻辑操作符</span></span><br><span class="line"><span class="comment">//0表示假，非0表示真</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a &amp;&amp; b) <span class="comment">//一个为假则为假,a需要与b同时满足</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;逻辑与&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a || b) <span class="comment">//a或者b有一个为真则结果为真</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;逻辑或\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, a = <span class="number">0</span>, b = <span class="number">2</span>, c = <span class="number">3</span>, d = <span class="number">4</span>;</span><br><span class="line"><span class="comment">//i = a++ &amp;&amp; ++b &amp; d++; //结果为1234</span></span><br><span class="line">i = a++ || ++b || d++; <span class="comment">//结果为1334</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d\nb=%d\nc=%d\nd=%d\n&quot;</span>, a, b, c, d);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8：条件操作符-三目操作符"><a href="#8：条件操作符-三目操作符" class="headerlink" title="8：条件操作符(三目操作符)"></a>8：条件操作符(三目操作符)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exp1?exp2:exp3</span><br><span class="line">    如果exp1的结果为真，则不进行exp3的计算。则表达式最终结果为exp2</span><br><span class="line">    如果exp1的结果为假，则表达式最终结果为exp3</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//条件操作符</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//if (a &gt; 5)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//b = 1;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//b = -1;</span></span><br><span class="line"><span class="comment">//&#125;  //使用三目表达式如下</span></span><br><span class="line">b = a &gt; <span class="number">5</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line"><span class="comment">//如果a&gt;5的结果为真，则b的结果为b，否则将-1的值给b</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9：逗号表达式"><a href="#9：逗号表达式" class="headerlink" title="9：逗号表达式"></a>9：逗号表达式</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逗号表达式</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> d = (c = <span class="number">5</span>, a = c + <span class="number">3</span>, b = a - <span class="number">4</span>, c += <span class="number">5</span>);</span><br><span class="line"><span class="comment">//c=5   a=8         b=4       c=10</span></span><br><span class="line"><span class="comment">//逗号表达式从左向右依次计算，但是整个表达式的结果是最后一个表达式</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;d=%d\n&quot;</span>, d);  <span class="comment">//结果为10</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10：下标引用、函数调用、结构成员"><a href="#10：下标引用、函数调用、结构成员" class="headerlink" title="10：下标引用、函数调用、结构成员"></a>10：下标引用、函数调用、结构成员</h2><h3 id="1）-下标引用操作符"><a href="#1）-下标引用操作符" class="headerlink" title="1）[]下标引用操作符"></a>1）[]下标引用操作符</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下标引用操作符</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="comment">//下标从0开始。5的下标为4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, arr[<span class="number">4</span>]); <span class="comment">//[4]下标引用操作符</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）函数调用操作符"><a href="#2）函数调用操作符" class="headerlink" title="2）函数调用操作符"></a>2）函数调用操作符</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数调用操作符</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>  <span class="comment">//函数的生命</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> ret = Add(a, b);  <span class="comment">//函数的调用，（）表示函数调用的操作符，操作数为add，a，b</span></span><br><span class="line"><span class="comment">//对于无参的函数，操作数仅为函数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）结构成员访问操作符"><a href="#3）结构成员访问操作符" class="headerlink" title="3）结构成员访问操作符"></a>3）结构成员访问操作符</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//结构成员访问操作符</span></span><br><span class="line"><span class="comment">//.     -&gt;</span></span><br><span class="line"><span class="comment">//描述一本书：书名，书号，定价等</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span> //<span class="keyword">struct</span>定义一个新的结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];  <span class="comment">//一个成员，书名  结构体成员/变量</span></span><br><span class="line"><span class="type">char</span> id[<span class="number">20</span>];   <span class="comment">//书号</span></span><br><span class="line"><span class="type">int</span> price;  <span class="comment">//价格</span></span><br><span class="line">&#125;;  <span class="comment">//;不可缺少</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span> <span class="title">b</span> =</span> &#123; <span class="string">&quot;C语言程序设计&quot;</span>,<span class="string">&quot;C20230326&quot;</span>,<span class="number">50</span> &#125;;  <span class="comment">//初始化类型</span></span><br><span class="line"><span class="comment">//printf(&quot;书名：%s\n&quot;, b.name);</span></span><br><span class="line"><span class="comment">//printf(&quot;书号：%s\n&quot;, b.id);</span></span><br><span class="line"><span class="comment">//printf(&quot;定价：%d\n&quot;, b.price);</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span>* <span class="title">pb</span> =</span> &amp;b;  <span class="comment">//取地址b使用指针</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;书名：%s\n&quot;</span>, (*pb).name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;书号：%s\n&quot;</span>, (*pb).id);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;定价：%d\n&quot;</span>, (*pb).price);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;书名：%s\n&quot;</span>, pb-&gt;name);  <span class="comment">//pb表示结构体，使用-&gt;指向成员，结构体指针-&gt;成员</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;书号：%s\n&quot;</span>, pb-&gt;id);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;定价：%d\n&quot;</span>, pb-&gt;price);</span><br><span class="line"><span class="comment">//两种方法最终结构一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方式，结构体.成员名，结构体指针-&gt;成员</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果</span></span><br><span class="line"><span class="comment">书名：C语言程序设计</span></span><br><span class="line"><span class="comment">书号：C20230326</span></span><br><span class="line"><span class="comment">定价：50</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="11：表达式求值"><a href="#11：表达式求值" class="headerlink" title="11：表达式求值"></a>11：表达式求值</h2><h3 id="1）整型提升（隐式）"><a href="#1）整型提升（隐式）" class="headerlink" title="1）整型提升（隐式）"></a>1）整型提升（隐式）</h3><p>表达式的求值顺序受操作符优先级影响，有时候会需要进行相关类型的转换</p><p>整形提升</p><ul><li>C语言的整形算数运算总是至少以某种缺省整形类型的精度来进行的</li><li>为了获得这个精度，表达式中的字符和短整型操作数再使用之前被转换为普通整型，这种转换称之为整型提升</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="type">char</span> a,b,c；</span><br><span class="line">a=b+c</span><br></pre></td></tr></table></figure><p>b和c的值被提升为普通整型(int)，然后再执行加法运算</p><p>加法运算完成之后，a中需要存放8字节，此时存放不下，因此结果将被截断，然后再存储与a中</p><p>整型提升的意义：</p><ul><li>表达式的整型运算要在CPU的相应运算器件内执行，CPU内整型运算器(ALU)的操作数的字节长度一般就是int字节的长度，同时也是CPU的通用寄存器的长度</li><li>因此，即使两个char类型的相加，再CPU执行时实际上也要先转换成CPU内存型操作数的标准长度</li><li>通用CPU时难以实现两个8比特字节直接相加运算，因此表达式中各种长度可能小于int长度的整型值，都必须先转换成int或者unsigned int，然后才能送入CPU执行运算</li></ul><p>如何进行整形提升？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//整形提升</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="comment">//00000000000000000000000000000011</span></span><br><span class="line"><span class="comment">//00000011，只能存储8字节</span></span><br><span class="line"><span class="type">char</span> b = <span class="number">127</span>;</span><br><span class="line"><span class="comment">//00000000000000000000000001111111</span></span><br><span class="line"><span class="comment">//011111111，b的大小</span></span><br><span class="line"><span class="type">char</span> c = a + b;  </span><br><span class="line"><span class="comment">//a和b都是char类型的，都没有达到一个int的大小，</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">整形提升，按照符号位进行提升，正数高位补0，负数高位补1，无符号的数高位补0</span></span><br><span class="line"><span class="comment">a提升后：00000000000000000000000000000011</span></span><br><span class="line"><span class="comment">b提升后：00000000000000000000000001111111</span></span><br><span class="line"><span class="comment">相加：0000000000000000000000000  10000010  //取后面8个比特位</span></span><br><span class="line"><span class="comment">c的值：10000010</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c);</span><br><span class="line"><span class="comment">//发生整形提升</span></span><br><span class="line"><span class="comment">//11111111111111111111111110000010----提升后补码</span></span><br><span class="line"><span class="comment">//11111111111111111111111110000001---反码</span></span><br><span class="line"><span class="comment">//10000000000000000000000001111110---原码--最高位表示符号位，最后计算为-126</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整型提升</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//整型提升示例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a = <span class="number">0xb6</span>;  <span class="comment">//char a一个有符号的char</span></span><br><span class="line"><span class="type">short</span> b = <span class="number">0xb600</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">0xb6000000</span>;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">0xb6</span>)  <span class="comment">//表达式为char类型，这里为int类型，涉及到整型提升</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0xb600</span>)  <span class="comment">//也存在整型提升</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="number">0xb6000000</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//整型提升示例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, <span class="keyword">sizeof</span>(c));  <span class="comment">//计算c变量所占用的大小，为1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, <span class="keyword">sizeof</span>(+c)); <span class="comment">//+c则需要参与运算，参与运算则发生整型提升</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, <span class="keyword">sizeof</span>(-c)); <span class="comment">//-c与+c一致</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, <span class="keyword">sizeof</span>(!c)); <span class="comment">//vs编译器为1，但按gcc编译器为4</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//%u-----无符号十进制数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）算数转换"><a href="#2）算数转换" class="headerlink" title="2）算数转换"></a>2）算数转换</h3><p>如果某个操作符的各个操作数属于不同类型，那么除非其中一个操作数转换为另一个操作数的类型，否则操作就无法进行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">double</span></span><br><span class="line"><span class="type">double</span></span><br><span class="line"><span class="type">float</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span></span><br><span class="line"><span class="type">long</span> <span class="type">int</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="comment">//从下向上转换的</span></span><br></pre></td></tr></table></figure><p>如果某个操作数的类型再上面列表中的排名低，则需要转换另外一个操作数的类型后执行运算</p><p>！但是算数转换需要合理，否则会出现潜在的问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//算数转换</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="type">float</span> f = <span class="number">4.5</span>;</span><br><span class="line"><span class="type">int</span> c = a + f;  <span class="comment">//需要将int类型转换为float类型再进行转换</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="12：操作符的属性"><a href="#12：操作符的属性" class="headerlink" title="12：操作符的属性"></a>12：操作符的属性</h2><h3 id="1）影响因素"><a href="#1）影响因素" class="headerlink" title="1）影响因素"></a>1）影响因素</h3><p>复杂表达式的求值的三个影响因素：</p><ol><li>操作符的优先级</li><li>操作符的结核性</li><li>是否控制求值顺序</li></ol><p>两个相邻的操作符先执行那个，取决于优先级，如果两个优先级相同的话，取决于他们的结合性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//操作符优先级</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> c = a + b * <span class="number">7</span>; <span class="comment">//先算乘再算加法</span></span><br><span class="line"><span class="type">int</span> d = a + b + c; <span class="comment">//优先级不起作用，结核性决定。</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）操作符优先级"><a href="#2）操作符优先级" class="headerlink" title="2）操作符优先级"></a>2）操作符优先级</h3><table><thead><tr><th>操作符</th><th>描述</th><th>用法示例</th><th>结果类型</th><th>结合性</th><th>收i否控制求值顺序</th></tr></thead><tbody><tr><td>（）</td><td>聚组</td><td>（表达式）</td><td>与表达式同</td><td>N&#x2F;A</td><td>否</td></tr><tr><td>（）</td><td>函数调用</td><td>rexp(rexp,rexp)</td><td>rexp</td><td>L-R</td><td>否</td></tr><tr><td>[]</td><td>下标引用</td><td>rexp[rexp]</td><td>rexp</td><td>L-R</td><td>否</td></tr><tr><td>.</td><td>访问结构成员</td><td>lexp.member_name</td><td>lexp</td><td>L-R</td><td>否</td></tr><tr><td>-&gt;</td><td>访问结构指针成员</td><td>rexp-&gt;member_name</td><td>lexp</td><td>L-R</td><td>否</td></tr><tr><td>++</td><td>后缀自增</td><td>lexp++</td><td>rexp</td><td>L-R</td><td>否</td></tr><tr><td>~</td><td>按位取反</td><td>~rexp</td><td>rexp</td><td>R-L</td><td>否</td></tr><tr><td>+</td><td>单目，正</td><td>+rexp</td><td>rexp</td><td>R-L</td><td>否</td></tr><tr><td>-</td><td>单目，负</td><td>-rexp</td><td>rexp</td><td>R-L</td><td>否</td></tr><tr><td>++</td><td>前缀自增</td><td>++lexp</td><td>rexp</td><td>R-L</td><td>否</td></tr><tr><td>–</td><td>前缀自减</td><td>–lexp</td><td>rexp</td><td>R-L</td><td>否</td></tr><tr><td>*</td><td>间接访问</td><td>*rexp</td><td>rexp</td><td>R-L</td><td>否</td></tr><tr><td>&amp;</td><td>取地址</td><td>&amp;lexp</td><td>rexp</td><td>R-L</td><td>否</td></tr><tr><td>sizeof</td><td>取长度，单位字节</td><td>sizeof rexp sizeof(类型)</td><td>rexp</td><td>R-L</td><td>否</td></tr><tr><td>(类型)</td><td>类型转换</td><td>（类型）rexp</td><td>rexp</td><td>R-L</td><td>否</td></tr><tr><td>*</td><td>乘法</td><td>rexp*rexp</td><td>rexp</td><td>L-R</td><td>否</td></tr><tr><td>&#x2F;</td><td>除法</td><td>rexp&#x2F;rexp</td><td>rexp</td><td>L-R</td><td>否</td></tr><tr><td>%</td><td>整数取余</td><td>rexp%rexp</td><td>rexp</td><td>L-R</td><td>否</td></tr><tr><td>+</td><td>加法</td><td>rexp+rexp</td><td>rexp</td><td>L-R</td><td>否</td></tr><tr><td>-</td><td>减法</td><td>rexp+rexp</td><td>rexp</td><td>L-R</td><td>否</td></tr><tr><td>&lt;&lt;</td><td>左移位</td><td>rexp &lt;&lt;rexp</td><td>rexp</td><td>L-R</td><td>否</td></tr><tr><td>&gt;&gt;</td><td>右移位</td><td>rexp&gt;&gt;rexp</td><td>rexp</td><td>L-R</td><td>否</td></tr><tr><td>&gt;</td><td>大于</td><td>rexp&gt;rexp</td><td>rexp</td><td>L-R</td><td>否</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td><td>rexp&gt;&#x3D;rexp</td><td>rexp</td><td>L-R</td><td>否</td></tr><tr><td>&lt;</td><td>小于</td><td>rexp&lt;rexp</td><td>rexp</td><td>L-R</td><td>否</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td><td>rexp&lt;&#x3D;rexp</td><td>rexp</td><td>L-R</td><td>否</td></tr><tr><td>&#x3D;&#x3D;</td><td>等于</td><td>rexp&#x3D;&#x3D;rexp</td><td>rexp</td><td>L-R</td><td>否</td></tr><tr><td>!&#x3D;</td><td>不等于</td><td>rexp!&#x3D;rexp</td><td>rexp</td><td>L-R</td><td>否</td></tr><tr><td>|</td><td>位或</td><td>rexp|rexp</td><td>rexp</td><td>L-R</td><td>否</td></tr><tr><td>&amp;&amp;</td><td>逻辑与</td><td>rexp&amp;&amp;rexp</td><td>rexp</td><td>L-R</td><td>是</td></tr><tr><td>||</td><td>逻辑或</td><td>rexp||rexp</td><td>rexp</td><td>L-R</td><td>是</td></tr><tr><td>?:</td><td>条件操作符</td><td>rexp?rexp:rexp</td><td>rexp</td><td>N&#x2F;A</td><td>是</td></tr><tr><td>&#x3D;</td><td>赋值</td><td>lexp&#x3D;rexp</td><td>rexp</td><td>R-L</td><td>否</td></tr><tr><td>+&#x3D;</td><td>加等</td><td>lexp+&#x3D;rexp</td><td>rexp</td><td>R-L</td><td>否</td></tr><tr><td>-&#x3D;</td><td>减等</td><td>lexp-&#x3D;rexp</td><td>rexp</td><td>R-L</td><td>否</td></tr><tr><td>*&#x3D;</td><td>乘等</td><td>lexp*&#x3D;rexp</td><td>rexp</td><td>R-L</td><td>否</td></tr><tr><td>&#x2F;&#x3D;</td><td>除等</td><td>lexp&#x2F;&#x3D;rexp</td><td>rexp</td><td>R-L</td><td>否</td></tr><tr><td>%&#x3D;</td><td>模等</td><td>lexp%&#x3D;rexp</td><td>rexp</td><td>R-L</td><td>否</td></tr><tr><td>&lt;&lt;&#x3D;</td><td>左移等</td><td>lexp&lt;&lt;&#x3D;rexp</td><td>rexp</td><td>R-L</td><td>否</td></tr><tr><td>&gt;&gt;&#x3D;</td><td>右移等</td><td>lexp&gt;&gt;&#x3D;rexp</td><td>rexp</td><td>R-L</td><td>否</td></tr><tr><td>&amp;&#x3D;</td><td>与等</td><td>lexp&amp;&#x3D;rexp</td><td>rexp</td><td>R-L</td><td>否</td></tr><tr><td>^&#x3D;</td><td>异或等</td><td>lexp^&#x3D;rexp</td><td>rexp</td><td>R-L</td><td>否</td></tr><tr><td>|&#x3D;</td><td>或等</td><td>lexp|&#x3D;rexp</td><td>rexp</td><td>R-L</td><td>否</td></tr><tr><td>,</td><td>逗号表达式</td><td>rexp,rexp</td><td>rexp</td><td>L-R</td><td>是</td></tr></tbody></table><h2 id="13：问题的表达式"><a href="#13：问题的表达式" class="headerlink" title="13：问题的表达式"></a>13：问题的表达式</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a*b+c*d+e*f</span><br></pre></td></tr></table></figure><p>第一种计算顺序</p><p><img src="/img/image-20230326212042850.png" alt="image-20230326212042850"></p><p>第二种计算顺序</p><p><img src="/img/image-20230326212108134.png" alt="image-20230326212108134"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c+--c;</span><br></pre></td></tr></table></figure><p>+号左边的值是在之前准备好的还是在–c后准备好的不确定</p><p>非法表达式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非法表达式</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line">i = i-- - --i * (i = <span class="number">-3</span>) * i++ + ++i; <span class="comment">//在不同平台的结果不一样</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i=%d\n&quot;</span>, i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//问题代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fun</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ++count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> answer;</span><br><span class="line">answer = fun() - fun() * fun();  <span class="comment">//不确定函数先调用哪个数值</span></span><br><span class="line"><span class="comment">//2-3*4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其他示例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> ret = (++i) + (++i) + (++i);</span><br><span class="line"><span class="comment">//4+4+4，先全部把++i算出来，在算前面的+，在算前面+的结果+后面的结果</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret); <span class="comment">//结果为12，在gcc编译器下为10</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c-learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 c-learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言-数组</title>
      <link href="/2023/03/26/%E6%95%B0%E7%BB%84/"/>
      <url>/2023/03/26/%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="1：一维数组的创建和初始化"><a href="#1：一维数组的创建和初始化" class="headerlink" title="1：一维数组的创建和初始化"></a>1：一维数组的创建和初始化</h2><h3 id="1）数组的概念"><a href="#1）数组的概念" class="headerlink" title="1）数组的概念"></a>1）数组的概念</h3><p>数组：一组相同元素类型的集合</p><h3 id="2）数组的创建方式"><a href="#2）数组的创建方式" class="headerlink" title="2）数组的创建方式"></a>2）数组的创建方式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">type_t</span> arr_name [const_n];</span><br><span class="line"><span class="type">type_t</span> 指数组元素的类型</span><br><span class="line">arr_name 指数组的名字</span><br><span class="line">const_n 是一个 常量表达式 ，用来指定数组的大小</span><br><span class="line">  []里面的需要是常量，不能是变量，C99语法才支持变成数组，即数组的大小是变量</span><br><span class="line">gcc编译器对于C99支持</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">8</span>];</span><br><span class="line"><span class="type">char</span> ch[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><h3 id="3）数组的初始化"><a href="#3）数组的初始化" class="headerlink" title="3）数组的初始化"></a>3）数组的初始化</h3><p>初始化即赋处值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr1[<span class="number">8</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span> &#125;;  <span class="comment">//完全初始化</span></span><br><span class="line"><span class="type">int</span> arr2[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span> &#125;;  <span class="comment">//会根据后面的值来自动确定数组的元素</span></span><br><span class="line"><span class="type">char</span> ch1[<span class="number">5</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;  <span class="comment">//不完全初始化，剩下的部分使用0填充</span></span><br><span class="line"><span class="type">char</span> ch2[<span class="number">5</span>] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span> &#125;; <span class="comment">//字符数组初始化，后面使用0（\0填充）</span></span><br><span class="line"><span class="type">char</span> ch3[] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span> &#125;; <span class="comment">//字符数组初始化，自动确定数组的个数</span></span><br><span class="line"><span class="type">char</span> ch4[<span class="number">5</span>] = <span class="string">&quot;bit&quot;</span>; <span class="comment">//放置了a,b,c,\0,\0</span></span><br><span class="line"><span class="type">char</span> ch5[] = <span class="string">&quot;bit&quot;</span>;<span class="comment">//放置了a,b,c,\0</span></span><br></pre></td></tr></table></figure><p><code>在char类型中才存在结尾\0说法，在int类型中不存在</code></p><h3 id="4）数组的使用"><a href="#4）数组的使用" class="headerlink" title="4）数组的使用"></a>4）数组的使用</h3><p><code>数组的下标从0开始</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">arr[<span class="number">4</span>] = <span class="number">5</span>; <span class="comment">//[]为下标引用操作符，中间填充元素下标</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); <span class="comment">//数组总大小/数组第一个大小=数组的个数</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; sz; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5）一堆数组在内存中的存储"><a href="#5）一堆数组在内存中的存储" class="headerlink" title="5）一堆数组在内存中的存储"></a>5）一堆数组在内存中的存储</h3><ul><li>一堆数组在内存中是连续存放的</li><li>随着数组下标的增长，地址是由低到高变化的</li></ul><h3 id="6）验证一堆数组是否连续"><a href="#6）验证一堆数组是否连续" class="headerlink" title="6）验证一堆数组是否连续"></a>6）验证一堆数组是否连续</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证一堆数组是否连续</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[%d] = %p\n&quot;</span>,i, &amp;arr[i]);  <span class="comment">//*p打印地址</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7）根据数组的特性来使用指针取元素值"><a href="#7）根据数组的特性来使用指针取元素值" class="headerlink" title="7）根据数组的特性来使用指针取元素值"></a>7）根据数组的特性来使用指针取元素值</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用指针访问第一个元素</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span>* p = arr;<span class="comment">//数组名是数组首元素的地址,这里即访问第一个元素</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *p);</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2：二维数组的创建与初始化"><a href="#2：二维数组的创建与初始化" class="headerlink" title="2：二维数组的创建与初始化"></a>2：二维数组的创建与初始化</h2><h3 id="1）创建"><a href="#1）创建" class="headerlink" title="1）创建"></a>1）创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二维数组的创建</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>];<span class="comment">//第一个3表示3行，第二个4表示四列，int类型</span></span><br><span class="line"><span class="type">char</span> ch[<span class="number">3</span>][<span class="number">10</span>]; <span class="comment">//char类型</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）初始化"><a href="#2）初始化" class="headerlink" title="2）初始化"></a>2）初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二维数组的初始化</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr1[<span class="number">3</span>][<span class="number">4</span>] = &#123; <span class="number">1.2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">12</span> &#125;;  <span class="comment">//初始化，创建的同时赋值,完全初始化</span></span><br><span class="line"><span class="comment">//根据元素的个数，依次进行添加，对于不完全初始化的数组，使用0填充</span></span><br><span class="line"><span class="type">int</span> arr2[][<span class="number">4</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>&#125;, &#123;<span class="number">3</span>,<span class="number">4</span>&#125;, &#123;<span class="number">5</span>,<span class="number">6</span>&#125; &#125;;  <span class="comment">//在第一行填写1，2，第二行填写3，4</span></span><br><span class="line"><span class="comment">//几行可以省略，会根据元素进行填充，但列不能省略</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）使用"><a href="#3）使用" class="headerlink" title="3）使用"></a>3）使用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二维数组的使用</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">二维数组的行号从0开始，依次类推</span></span><br><span class="line"><span class="comment">二维数组的列号从0开始，依次类推</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>&#125;, &#123;<span class="number">3</span>,<span class="number">4</span>&#125;, &#123;<span class="number">5</span>,<span class="number">6</span>&#125; &#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)  <span class="comment">//循环行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)  <span class="comment">//循环列</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i][j]);  <span class="comment">//打印一个元素</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  <span class="comment">//换行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4）二维数组在数组中的存储"><a href="#4）二维数组在数组中的存储" class="headerlink" title="4）二维数组在数组中的存储"></a>4）二维数组在数组中的存储</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印二维数组的地址</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>&#125;, &#123;<span class="number">3</span>,<span class="number">4</span>&#125;, &#123;<span class="number">5</span>,<span class="number">6</span>&#125; &#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)  <span class="comment">//循环行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)  <span class="comment">//循环列</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[%d][%d]=%p\n&quot;</span>,i,j, &amp;arr[i][j]);  <span class="comment">//打印一个元素</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  <span class="comment">//换行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*相邻之间差4，一个int整形的大小为4</span></span><br><span class="line"><span class="comment">&amp;arr[0][0]=0073FDA0</span></span><br><span class="line"><span class="comment">&amp;arr[0][1]=0073FDA4</span></span><br><span class="line"><span class="comment">&amp;arr[0][2]=0073FDA8</span></span><br><span class="line"><span class="comment">&amp;arr[0][3]=0073FDAC</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&amp;arr[1][0]=0073FDB0</span></span><br><span class="line"><span class="comment">&amp;arr[1][1]=0073FDB4</span></span><br><span class="line"><span class="comment">&amp;arr[1][2]=0073FDB8</span></span><br><span class="line"><span class="comment">&amp;arr[1][3]=0073FDBC</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&amp;arr[2][0]=0073FDC0</span></span><br><span class="line"><span class="comment">&amp;arr[2][1]=0073FDC4</span></span><br><span class="line"><span class="comment">&amp;arr[2][2]=0073FDC8</span></span><br><span class="line"><span class="comment">&amp;arr[2][3]=0073FDCC</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><p>二维数组在内存中也是连续存放的</p></li><li><p>一行内部连续，跨行也是连续的</p></li></ul><h2 id="3：数组作为函数的参数"><a href="#3：数组作为函数的参数" class="headerlink" title="3：数组作为函数的参数"></a>3：数组作为函数的参数</h2><p>对数组内容进行排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对数组内容进行排序</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> sz)</span>  <span class="comment">//形参arr本质是指针</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">冒泡排序的思想：两两相邻的元素进行比较，并且可能的话需要交换。</span></span><br><span class="line"><span class="comment">9 8 7 6 5 4 3 2 1 0</span></span><br><span class="line"><span class="comment">8 9 7 6 5 4 3 2 1 0</span></span><br><span class="line"><span class="comment">8 7 9 6 5 4 3 2 1 0</span></span><br><span class="line"><span class="comment">……</span></span><br><span class="line"><span class="comment">当9在左右边的时候，表示数组内容比较完了</span></span><br><span class="line"><span class="comment">上面为一趟冒泡排序，在次基础上，再次进行冒泡排序</span></span><br><span class="line"><span class="comment">10个数字需要9趟冒泡排序，n个数字则需要进行n-1次</span></span><br><span class="line"><span class="comment">9个数字排序，需要进行8对比较，8个数字排序，需要进行7对比较</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//计算趟数</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;   <span class="comment">//定义一个flag为1</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz - <span class="number">1</span>; i++)  <span class="comment">//所需要的趟数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; sz - <span class="number">1</span> - i ; j++) <span class="comment">//sz-1为字符个数</span></span><br><span class="line"><span class="comment">//-i则减去所需要的趟数，等于需要比较的次数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])  <span class="comment">//升序前面大于后面则进行交换</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp = arr[j];   <span class="comment">//两个元素交换</span></span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">flag = <span class="number">0</span>;  <span class="comment">//如果发生了交换，则置为0，为发生交换则保持原有</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">1</span>)  <span class="comment">//如果flag没有置0，则跳出循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); <span class="comment">//计算元素的个数</span></span><br><span class="line"><span class="comment">//数组在传参的时候，传递的是数组首元素的地址,因此需要先在外面求好传递给函数</span></span><br><span class="line">bubble_sort(arr,sz);<span class="comment">//排序为升序，冒泡排序;</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)  <span class="comment">//打印数组</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果可以使用F10进行调试查看</span></span><br></pre></td></tr></table></figure><h2 id="4：关于数组取地址等"><a href="#4：关于数组取地址等" class="headerlink" title="4：关于数组取地址等"></a>4：关于数组取地址等</h2><p><code>数组名就是数组的首元素地址</code></p><p><code>但是有两个例外</code></p><ul><li><code>sizeof(数组名)此时表示整形，计算整个数组的大小，单位为字节</code></li><li><code>&amp;数组名，数组名表示整个数组，去除的是整个数组的地址</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组的地址相关</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr);<span class="comment">// &amp;arr取得的是整个数组的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//两个的含义一样，表示的是首元素的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr); <span class="comment">//数组名表示整个数组</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sz);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组作为函数传参的时候，形参可以写成2种形式</p><ol><li>数组形式</li><li>指针形式</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>]</span><br><span class="line"><span class="type">char</span> ch[<span class="number">3</span>][<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">test(arr)</span><br><span class="line"><span class="comment">//形参是数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test1</span><span class="params">(<span class="type">int</span> arr[<span class="number">10</span>])</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test1</span><span class="params">(<span class="type">int</span> arr[])</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//形参是指针的形式</span></span><br><span class="line"><span class="type">void</span> test1（<span class="type">int</span> *arr）</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5：数组的案例"><a href="#5：数组的案例" class="headerlink" title="5：数组的案例"></a>5：数组的案例</h2><h3 id="1）三子棋"><a href="#1）三子棋" class="headerlink" title="1）三子棋"></a>1）三子棋</h3><p>前提说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">game.h为头文件，声明定义的函数以及变量</span><br><span class="line">sanziqi.c为游戏主函数文件，负责调用各个函数</span><br><span class="line">game.c为实现函数文件，负责实现每个函数</span><br></pre></td></tr></table></figure><p><code>game.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="comment">//这里是头文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//头文件的引用</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//符号的定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROW 3 <span class="comment">//定义一个行，可以自定义修改成任意</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COL 3  <span class="comment">//定义一个列</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数的声明</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Initboard</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span>; <span class="comment">//初始化棋盘</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Displayboard</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span>;  <span class="comment">//打印棋盘的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PlayerMove</span><span class="params">(<span class="type">char</span> board[ROW][COL],<span class="type">int</span> row,<span class="type">int</span> col)</span>; <span class="comment">//实现玩家下棋</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Computerboard</span><span class="params">(<span class="type">char</span> boad[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span>; <span class="comment">//实现电脑下棋</span></span><br><span class="line"><span class="type">char</span> <span class="title function_">Iswin</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span>;<span class="comment">//判断输赢</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">玩家赢了---输出&#x27;*&#x27;</span></span><br><span class="line"><span class="comment">电脑赢了---输出&#x27;#&#x27;</span></span><br><span class="line"><span class="comment">平局---&#x27;Q&#x27;</span></span><br><span class="line"><span class="comment">继续--&#x27;C&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>sanziqi.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="comment">//实现游戏第一次结束后，还可以自行选择是继续还是退出，使用do while实现</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;game.h&quot;</span>  <span class="comment">//引用自定义的头文件</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span>  <span class="comment">//生成一个简易的菜单</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*****************************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;********  1.play  ***********\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;********  0.exit  ***********\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*****************************\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">game</span><span class="params">()</span>  <span class="comment">//实现三子棋游戏函数，三乘三的数组</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//存储数据，需要一个二维数组</span></span><br><span class="line"><span class="type">char</span> board[ROW][COL];  <span class="comment">//引用头文件中定义的行列</span></span><br><span class="line"><span class="comment">//初始化棋盘，即初始化空格、</span></span><br><span class="line"> Initboard(board,ROW,COL); <span class="comment">//将行和列传递给初始化函数</span></span><br><span class="line"><span class="comment">//打印棋盘--Displatboard函数---本质是在打印数组的内容</span></span><br><span class="line">Displayboard(board,ROW,COL);  <span class="comment">//因为是打印数组，所以需要传递数组以及行列</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> ret = <span class="number">0</span>; <span class="comment">//用来接收游戏状态</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//玩家走</span></span><br><span class="line">PlayerMove(board,ROW,COL); <span class="comment">//传递行和列</span></span><br><span class="line">Displayboard(board, ROW, COL); <span class="comment">//打印</span></span><br><span class="line"><span class="comment">//判断玩家是否赢得游戏</span></span><br><span class="line">ret = Iswin(board, ROW, COL);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//电脑走</span></span><br><span class="line">Computerboard(board, ROW, COL);</span><br><span class="line">Displayboard(board, ROW, COL);  <span class="comment">//打印</span></span><br><span class="line"><span class="comment">//判断电脑是否赢得游戏</span></span><br><span class="line">ret = Iswin(board, ROW, COL);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;玩家赢\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;电脑赢\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;平局\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Displayboard(board, ROW, COL);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>));  <span class="comment">//调用随机生成器</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">menu();  <span class="comment">//调用简易菜单函数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line"><span class="keyword">switch</span> (input)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">game();  <span class="comment">//调用游戏函数</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;退出游戏\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;选择错误,请重新选择\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (input);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>game.c</code>、</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="comment">//这里是游戏实现</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;game.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//函数的声明---初始化棋盘</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Initboard</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line"><span class="comment">//这里char board[ROW][COL]表示数组传递给函数并说明了行和列</span></span><br><span class="line"><span class="comment">//row，col表示真实传递的行和列</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">&#123;</span><br><span class="line">board[i][j] = <span class="string">&#x27; &#x27;</span>; <span class="comment">//初始化棋盘，使用空格填充</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印棋盘的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Displayboard</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %c &quot;</span>, board[i][j]);<span class="comment">//%c输出单个字符 ，打印一行的每一项</span></span><br><span class="line"><span class="keyword">if</span> (j &lt; col - <span class="number">1</span>) <span class="comment">//最后一列不打印</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);  <span class="comment">//打印一个|</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; row - <span class="number">1</span>)<span class="comment">//可以根据行列自动调整</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (j &lt; col - <span class="number">1</span>)  <span class="comment">//最后一行不打印</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现玩家下棋</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PlayerMove</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;玩家走\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入坐标：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="comment">//判断坐标的合法性</span></span><br><span class="line"><span class="keyword">if</span> (x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= row &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= col)  <span class="comment">//判断坐标是否合法</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//下棋</span></span><br><span class="line"><span class="comment">//坐标是否被占用</span></span><br><span class="line"><span class="keyword">if</span> (board[x - <span class="number">1</span>][y - <span class="number">1</span>] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">board[x - <span class="number">1</span>][y - <span class="number">1</span>] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;坐标被占用，请重新输入\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;坐标非法，请重新输入\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现电脑下棋</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Computerboard</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;电脑走\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = rand() % row;  <span class="comment">//生成合法性坐标，示例为3.模3的余数为0-2</span></span><br><span class="line"><span class="type">int</span> y = rand() % col;  <span class="comment">//生成合法性坐标</span></span><br><span class="line"><span class="keyword">if</span> (board[x][y] == <span class="string">&#x27; &#x27;</span>)  <span class="comment">//判断是否占用，电脑坐标为0-2，因此不需要减1</span></span><br><span class="line">&#123;</span><br><span class="line">board[x][y] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断棋盘是否满</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsFull</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//棋盘未满</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//棋盘满</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断游戏的输赢</span></span><br><span class="line"><span class="type">char</span> <span class="title function_">Iswin</span><span class="params">(<span class="type">char</span> board[ROW][COL], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断三行是否一致</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][<span class="number">0</span>] == board[i][<span class="number">1</span>] &amp;&amp; board[i][<span class="number">1</span>] == board[i][<span class="number">2</span>] &amp;&amp; board[i][<span class="number">1</span>] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> board[i][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断三列是否一致</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; col; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (board[<span class="number">0</span>][i] == board[<span class="number">1</span>][i] &amp;&amp; board[<span class="number">1</span>][i] == board[<span class="number">2</span>][i] &amp;&amp; board[<span class="number">1</span>][i] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> board[<span class="number">1</span>][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断对角线是否一致</span></span><br><span class="line"><span class="keyword">if</span> (board[<span class="number">0</span>][<span class="number">0</span>] == board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">1</span>]== board[<span class="number">2</span>][<span class="number">2</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">1</span>] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> board[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (board[<span class="number">0</span>][<span class="number">2</span>] == board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">1</span>] == board[<span class="number">2</span>][<span class="number">0</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">1</span>] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> board[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断棋盘是否满了</span></span><br><span class="line"><span class="comment">//如果棋盘满了返回1，不满返回0</span></span><br><span class="line"><span class="type">int</span> ret = IsFull(board, row, col);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继续</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）计算数组大小与字符串长度"><a href="#2）计算数组大小与字符串长度" class="headerlink" title="2）计算数组大小与字符串长度"></a>2）计算数组大小与字符串长度</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;Hello 123&quot;</span>;</span><br><span class="line"><span class="comment">//默认字符串后面放一个\0</span></span><br><span class="line"><span class="comment">//char 类型一个字符大小为1字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, <span class="keyword">sizeof</span>(str),<span class="built_in">strlen</span>(str));  <span class="comment">//结果为10，9</span></span><br><span class="line">    <span class="comment">//sizeof：函数求字符串的长度，找\0之前d鄂字符个数</span></span><br><span class="line">    <span class="comment">//strlen：函数求字符串的长度</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）数组的初始化与逆序"><a href="#3）数组的初始化与逆序" class="headerlink" title="3）数组的初始化与逆序"></a>3）数组的初始化与逆序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//设计程序，实现init()函数初始化数组为全0</span></span><br><span class="line"><span class="comment">//实现print()打印数组的每个元素</span></span><br><span class="line"><span class="comment">//实现reverse() 函数完成数组元素的逆序</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right = sz - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (left &lt; right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp = arr[left];</span><br><span class="line">arr[left] = arr[right];</span><br><span class="line">arr[right] = tmp;</span><br><span class="line">left++;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);  <span class="comment">//计算数组里面的字符数量</span></span><br><span class="line">print(arr, sz);</span><br><span class="line">reverse(arr, sz);  <span class="comment">//完成逆序</span></span><br><span class="line">print(arr, sz);</span><br><span class="line">init(arr, sz);  <span class="comment">//完成初始化</span></span><br><span class="line">print(arr, sz);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4）交换两个数组的内容"><a href="#4）交换两个数组的内容" class="headerlink" title="4）交换两个数组的内容"></a>4）交换两个数组的内容</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将两组数组的内容交换，假设数组的大小一样</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> arr1[],<span class="type">int</span> arr2[], <span class="type">int</span> sz)</span>  <span class="comment">//打印数组函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr1[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; arr1交换后\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;% d&quot;</span>, arr2[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; arr2交换后\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr1[] = &#123; <span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="type">int</span> arr2[] = &#123; <span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr1) / <span class="keyword">sizeof</span>(arr1[<span class="number">0</span>]);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp = arr1[i];</span><br><span class="line">arr1[i] = arr2[i];</span><br><span class="line">arr2[i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">print(arr1, arr2, sz);  <span class="comment">//打印交换后的数组</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c-learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 c-learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言-函数</title>
      <link href="/2023/03/21/%E5%87%BD%E6%95%B0/"/>
      <url>/2023/03/21/%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1：函数的含义"><a href="#1：函数的含义" class="headerlink" title="1：函数的含义"></a>1：函数的含义</h2><p>维基百科对于函数的解释：子程序</p><p>在计算机科学与技术中，子程序是一个大型程序中的某部分代码，由一个或者多个语句块组成，负责完成某项特定的任务，相对于其他的代码，具备相对的独立性</p><p>一般会有输入参数和返回值，提供对过程的封装和细节的隐藏，这些代码通常被即成为软件库</p><p>c语言中的函数：</p><ul><li>库函数</li><li>自定义函数</li></ul><h2 id="2：常用函数"><a href="#2：常用函数" class="headerlink" title="2：常用函数"></a>2：常用函数</h2><p>IO函数：输入输出函数</p><p>字符串函数：strcmp，strlen等</p><h2 id="3：strcpy函数"><a href="#3：strcpy函数" class="headerlink" title="3：strcpy函数"></a>3：strcpy函数</h2><p>查看函数使用方法网站</p><p><a href="https://legacy.cplusplus.com/">cplusplus</a>，直接搜索函数即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr1[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">char</span> arr2[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(arr1, arr2);  <span class="comment">//strcpy 拷贝字符串</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, arr1);  <span class="comment">//打印arr1字符串，%s---以字符串的格式打印</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用库函数需要引用其头文件</p><h2 id="4：memset函数"><a href="#4：memset函数" class="headerlink" title="4：memset函数"></a>4：memset函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//memset 内存设置</span></span><br><span class="line"><span class="type">char</span> arr[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">memset</span>(arr, <span class="string">&#x27;x&#x27;</span>, <span class="number">5</span>);  <span class="comment">//将arr空间的前5个字符设置成x</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5：自定义函数"><a href="#5：自定义函数" class="headerlink" title="5：自定义函数"></a>5：自定义函数</h2><p>自定义函数和库函数一样，有函数名，返回值类型和函数参数，但这些内容需要自行进行设置</p><p>函数的基本组成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ret_type <span class="title function_">fun_name</span><span class="params">(para1,*)</span></span><br><span class="line">&#123;</span><br><span class="line">statement;语句项</span><br><span class="line">&#125;</span><br><span class="line">ret_type 返回类型</span><br><span class="line">fun_name 函数名</span><br><span class="line">para1 函数参数</span><br></pre></td></tr></table></figure><p>示例：写一个函数，查找两个函数中的较大值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>  <span class="comment">//int 表示返回类型，get_max表示函数名，int x int y表示参数</span></span><br><span class="line">    <span class="comment">//传值调用</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> z = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (x &gt; y)</span><br><span class="line">&#123;</span><br><span class="line">z = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">z = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> z;  <span class="comment">//返回最大值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//函数的调用</span></span><br><span class="line"><span class="type">int</span> max = get_max(a, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;max=%d\n&quot;</span>, max);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写出一个函数，交换两个整形的变量值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误写法</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>  <span class="comment">//void表示函数不需要返回值</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> z = <span class="number">0</span>;</span><br><span class="line">z = x;</span><br><span class="line">x = y;</span><br><span class="line">y = z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;交换前：a=%d b=%d\n&quot;</span>, a, b);</span><br><span class="line">swap(a, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;交换前：a=%d b=%d\n&quot;</span>, a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时运行会发现并没有交换变量。其原因是main函数里面的变量地址与swap函数中的变量地址不一样。因此不会交换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将指针应用到交换变量中</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>* pa, <span class="type">int</span>* pb)</span>  <span class="comment">//void表示函数不需要返回值</span></span><br><span class="line"><span class="comment">//*pa表示访问到a，*pb表示访问到b</span></span><br><span class="line"><span class="comment">//int* pa 创建pa的指针变量</span></span><br><span class="line">    <span class="comment">//传址调用</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> z = <span class="number">0</span>;</span><br><span class="line">z = *pa;</span><br><span class="line">*pa = *pb;</span><br><span class="line">*pb = z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;交换前：a=%d b=%d\n&quot;</span>, a, b);</span><br><span class="line">swap(&amp;a, &amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;交换前：a=%d b=%d\n&quot;</span>, a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6：函数的参数"><a href="#6：函数的参数" class="headerlink" title="6：函数的参数"></a>6：函数的参数</h2><h3 id="1）实际参数（实参）"><a href="#1）实际参数（实参）" class="headerlink" title="1）实际参数（实参）"></a>1）实际参数（实参）</h3><p>真实传递给函数的参数，可以是常量、变量、表达式、函数等，函数调用的时候传递的参数叫做实参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swap(&amp;a, &amp;b);  <span class="comment">//实参</span></span><br></pre></td></tr></table></figure><h3 id="2）形式参数（形参）"><a href="#2）形式参数（形参）" class="headerlink" title="2）形式参数（形参）"></a>2）形式参数（形参）</h3><p>形参是指函数名后括号中的变量，在定义函数的时候的参数。只有在函数被调用的过程中才实例化的参数（分配内存单元），形式参数用完后自动销毁，因此形式参数只在函数中有效</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>* pa, <span class="type">int</span>* pb)</span>  <span class="comment">//形参</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> z = <span class="number">0</span>;</span><br><span class="line">z = *pa;</span><br><span class="line">*pa = *pb;</span><br><span class="line">*pb = z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>改变形参，不能够改变实参</code></p><h2 id="7：函数的调用"><a href="#7：函数的调用" class="headerlink" title="7：函数的调用"></a>7：函数的调用</h2><p><code>传值调用</code>：函数的形参和实参分别占有不同的内存块，对形参的修改不会影响实参</p><p><code>传址调用</code></p><ul><li>传址调用是把函数外部创建变量的内存地址传递给函数参数的一种调用函数的方式</li><li>这种传参方式可以让函数和函数外边的变量建立起真正的联系，也就是函数内部可以直接操作函数外部的变量</li></ul><h2 id="8：示例"><a href="#8：示例" class="headerlink" title="8：示例"></a>8：示例</h2><h3 id="1）打印100-200之间的素数"><a href="#1）打印100-200之间的素数" class="headerlink" title="1）打印100-200之间的素数"></a>1）打印100-200之间的素数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">is_prime</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">2</span>; j &lt; <span class="built_in">sqrt</span>(n) ; j++) <span class="comment">//sqrt(n)开平方</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n % j == <span class="number">0</span>)   <span class="comment">//如果能够整除，则表示不 是素数，返回0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">//不能整除的返回1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">100</span>; i &lt;= <span class="number">200</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (is_prime(i) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\ncount=%d&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）判断闰年"><a href="#2）判断闰年" class="headerlink" title="2）判断闰年"></a>2）判断闰年</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用函数判断闰年</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">is_leap_year</span><span class="params">(<span class="type">int</span> n)</span>  <span class="comment">//函数如果不写返回类型，默认返回int类型</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*if (((n % 4 == 0) &amp;&amp; (n % 100 != 0)) || (n % 400 == 0))</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">return 1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">return 0;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">return</span>  (((n % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (n % <span class="number">100</span> != <span class="number">0</span>)) || (n % <span class="number">400</span> == <span class="number">0</span>));  <span class="comment">//为真则返回1，为假返回0.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (y = <span class="number">1000</span>; y &lt;= <span class="number">2000</span>; y++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (is_leap_year(y) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, y);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\ncount=%d&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）二分查找有序数组"><a href="#3）二分查找有序数组" class="headerlink" title="3）二分查找有序数组"></a>3）二分查找有序数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用函数取一个有序数组的摸一个元素</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">binary_search</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> k, <span class="type">int</span> s)</span>  <span class="comment">//arr为数组，这里也需要使用数组接收</span></span><br><span class="line"><span class="comment">//数组在传递的时候，实际传递的不是数组本身，传递的是首元素的地址。因此需要使用指针</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right = s - <span class="number">1</span>;  <span class="comment">//元素个数-1等于右边下标数</span></span><br><span class="line"><span class="keyword">while</span>(left&lt;=right)</span><br><span class="line">&#123; </span><br><span class="line"><span class="type">int</span> mid = (left + right) / <span class="number">2</span>;  <span class="comment">//找到中间数的下标</span></span><br><span class="line"><span class="keyword">if</span> (a[mid] &gt; k)</span><br><span class="line">&#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[mid] &lt; k)</span><br><span class="line">&#123;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">//如果没有找到则返回-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span> key = <span class="number">7</span>;</span><br><span class="line"><span class="comment">//找到了就返回找到位置的下标，找不到返回-1</span></span><br><span class="line"><span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="type">int</span> ret = binary_search(arr,key,sz);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == ret)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未找到\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到了，下标是：%d\n&quot;</span>, ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>数组的传递，如果需要传递数组的个数，需要现在函数外面计算出数组的个个数，在传递给函数，如果需要在函数内部计算数组的个数，需要用到指针</code></p><h3 id="4）传址示例"><a href="#4）传址示例" class="headerlink" title="4）传址示例"></a>4）传址示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当函数调用一次的时候，num加1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span>* p)</span>  <span class="comment">//需要函数来改变内容，因此需要传址</span></span><br><span class="line">&#123;</span><br><span class="line">(*p)++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"> <span class="comment">//第一次调用</span></span><br><span class="line">Add(&amp;num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, num);</span><br><span class="line"><span class="comment">//第二次调用</span></span><br><span class="line">Add(&amp;num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, num);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9：函数的嵌套调用和链式访问"><a href="#9：函数的嵌套调用和链式访问" class="headerlink" title="9：函数的嵌套调用和链式访问"></a>9：函数的嵌套调用和链式访问</h2><p><code>函数不能嵌套定义，但是可以嵌套调用</code></p><h3 id="1）函数的嵌套调用"><a href="#1）函数的嵌套调用" class="headerlink" title="1）函数的嵌套调用"></a>1）函数的嵌套调用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test3</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">test2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">test3();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">test2();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）函数的链式访问"><a href="#2）函数的链式访问" class="headerlink" title="2）函数的链式访问"></a>2）函数的链式访问</h3><p>链式访问即将一个函数的返回值作为另一个函数的参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, len);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;abc&quot;</span>));  <span class="comment">//将函数的返回值作为另一个函数的参数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr1[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">char</span> arr2[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">strcpy</span>(arr1, arr2));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>printf函数返回值为int，返回的是打印在屏幕上的个数</p><h2 id="10：函数的声明"><a href="#10：函数的声明" class="headerlink" title="10：函数的声明"></a>10：函数的声明</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数的声明</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//函数在后面，需要先声明函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span>;  <span class="comment">//函数声明，放在调用前</span></span><br><span class="line"><span class="type">int</span> c = Add(a, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数的定义</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明</p><ul><li><p>告知函数的返回类型，函数名，参数类型即可，具体的参数可以不写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span>;</span><br></pre></td></tr></table></figure></li><li><p>函数的声明一般出现在函数的使用之前，要满足先声明后使用</p></li><li><p><code>函数的声明一般要放在头文件中</code></p></li></ul><p><code>如果函数的定义写在前面，可以不声明，如果函数的定义在主函数之后则需要进行声明</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态库的导入</span></span><br><span class="line"><span class="comment">//#pragma commer(lib,&quot;sub.lib&quot;)//lib表示静态库，&quot;sub.lib&quot;表示静态库名字</span></span><br></pre></td></tr></table></figure><h2 id="11：函数的递归"><a href="#11：函数的递归" class="headerlink" title="11：函数的递归"></a>11：函数的递归</h2><p>程序调用自身的变成技巧称为递归，递归作为一种算法在程序设计中广泛使用，即函数在函数内部调用自身</p><h3 id="1）示例"><a href="#1）示例" class="headerlink" title="1）示例"></a>1）示例</h3><p>将1234逐字打印出来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//逐字打印1234</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line">print(n / <span class="number">10</span>); <span class="comment">//递归调用函数本身</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, n % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> num = <span class="number">0</span>;  <span class="comment">//unsigned无符号整型</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%u&quot;</span>, &amp;num);<span class="comment">//1234，%u表示按unsigned int格式输出</span></span><br><span class="line">print(num);<span class="comment">//print函数打印参数部分的数字的每一位</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1234 % 10         = 4</span><br><span class="line">1234/10 =123 % 10 =3</span><br><span class="line">123/10  =12 %10   =2</span><br><span class="line">12/10   =1%10     =1</span><br></pre></td></tr></table></figure><p><code>递归的两个必要条件</code></p><ul><li>存在限制条件，当满足这个限制条件的时候，递归便不在继续</li><li>每次递归调用之后越来越接近这个限制条件</li></ul><h3 id="2）栈溢出"><a href="#2）栈溢出" class="headerlink" title="2）栈溢出"></a>2）栈溢出</h3><p><img src="/img/image-20230322140727014.png" alt="image-20230322140727014"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">10000</span>)  <span class="comment">//栈溢出</span></span><br><span class="line">&#123;</span><br><span class="line">test(n + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">test(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈区：局部变量，函数形参</p><p>堆区：动态内存分配的malloc&#x2F;free，calloc，realloc</p><p>静态区：全局变量，静态变量</p><p><code>栈溢出</code></p><p>程序运行时调用函数，会在内存的栈区中分配一块空间，称为函数的栈帧空间，如果在函数中还存在其他函数，则再次在内存的栈区中分配空间给函数，。但当递归层次太深的时候，则会出现栈溢出</p><ul><li>不能死递归，需要有跳出的条件，每次递归都逼近条件</li><li>递归层次不能太深（否则会出现栈溢出）</li></ul><h3 id="3）求字符串的长度"><a href="#3）求字符串的长度" class="headerlink" title="3）求字符串的长度"></a>3）求字符串的长度</h3><h4 id="a-使用临时变量的方式"><a href="#a-使用临时变量的方式" class="headerlink" title="a.使用临时变量的方式"></a>a.使用临时变量的方式</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写函数，求字符串的长度</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_strlen</span><span class="params">(<span class="type">char</span>* str)</span>  <span class="comment">//获取arr的地址</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>  (*str != <span class="string">&#x27;\0&#x27;</span>)  <span class="comment">//*str，通过指针拿到的内容</span></span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">str++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="comment">//模拟实现一个strlen函数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, my_strlen(arr)); <span class="comment">//arr为数组，这里就不需要取地址&amp;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="b-不使用临时变量"><a href="#b-不使用临时变量" class="headerlink" title="b.不使用临时变量"></a>b.不使用临时变量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_strlen</span><span class="params">(<span class="type">char</span>* str)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + my_strlen(str + <span class="number">1</span>); <span class="comment">//strl+1表示下一个字符的地址</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[] = <span class="string">&quot;bit&quot;</span>;</span><br><span class="line"><span class="comment">//模拟实现一个strlen函数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, my_strlen(arr));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4）求n的阶乘（不考虑溢出）"><a href="#4）求n的阶乘（不考虑溢出）" class="headerlink" title="4）求n的阶乘（不考虑溢出）"></a>4）求n的阶乘（不考虑溢出）</h3><p><code>循环也可以称为一次迭代</code></p><p>Fac(n)&#x3D;</p><ul><li>n&lt;&#x3D;1,1</li><li>n&gt;1,n*Fac(n-1)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求n的阶乘，不考虑溢出</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fac</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> n * fac(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="type">int</span> ret = fac(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5）求第n个斐波那契数"><a href="#5）求第n个斐波那契数" class="headerlink" title="5）求第n个斐波那契数"></a>5）求第n个斐波那契数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span></span><br><span class="line"><span class="comment">//第三个数等于前两个数的和</span></span><br></pre></td></tr></table></figure><p>Fib(n)&#x3D;</p><ul><li>n&lt;2，1</li><li>n&gt;2,Fib(n-1)+Fib(n-2)</li></ul><p>使用递归</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求第n个斐波那契数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//递归可以求解，但效率比较低</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Fib</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">3</span>) <span class="comment">//计算第三个斐波那契数计算机计算的次数</span></span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> Fib(n - <span class="number">1</span>) + Fib(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="type">int</span> ret = Fib(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\ncount=%d&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Fib</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> ( n &gt; <span class="number">2</span> )</span><br><span class="line">&#123;</span><br><span class="line">c = a + b;</span><br><span class="line">a = b;</span><br><span class="line">b = c;</span><br><span class="line">n--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="type">int</span> ret = Fib(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ret);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12：其他"><a href="#12：其他" class="headerlink" title="12：其他"></a>12：其他</h2><h3 id="1）函数传参个数"><a href="#1）函数传参个数" class="headerlink" title="1）函数传参个数"></a>1）函数传参个数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec ((v1,v2),(v3,v4),v5,v6)函数传递几个参数</span><br></pre></td></tr></table></figure><p>4个，前面的（v1,v2）为逗号表达式，最终结果为最后一个参数的值即v2，（v3,v4）的结果为v4，v5，v6总共4个参数</p><p>2）函数自定义打印乘法表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印乘法口诀表，具体行自定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_table</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= i; j++)  <span class="comment">//打印一行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%d &quot;</span>, i, j, i * j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);<span class="comment">//换行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">print_table(n); <span class="comment">//表示需要打印几行</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）计算递归函数的结果"><a href="#2）计算递归函数的结果" class="headerlink" title="2）计算递归函数的结果"></a>2）计算递归函数的结果</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算最后返回值为多少</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Fun</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * Fun(n + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Fun(<span class="number">2</span>));  <span class="comment">//最后结果为16</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）内存的相关区域"><a href="#3）内存的相关区域" class="headerlink" title="3）内存的相关区域"></a>3）内存的相关区域</h3><p>栈区：局部变量，函数参数，调用函数时返回值，等临时的变量</p><p>堆区：动态内存分配</p><p>静态区：全部变量，静态变量</p><p>函数调用的时候，会调用栈区，每次函数调用的时候都会开辟一个栈区，函数返回的时候则销毁对应的栈区</p><h3 id="4）将abcdef输出为fedbac"><a href="#4）将abcdef输出为fedbac" class="headerlink" title="4）将abcdef输出为fedbac"></a>4）将abcdef输出为fedbac</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现数组abcdef，处理后成fedcba，不允许使用c语言自身存在的函数</span></span><br><span class="line"><span class="comment">/*实现思路</span></span><br><span class="line"><span class="comment">abcdef逆序</span></span><br><span class="line"><span class="comment">即a与f交换顺序，b与e交换……</span></span><br><span class="line"><span class="comment">因此定义left下标，找到a，给一个right下标，找到f</span></span><br><span class="line"><span class="comment">left++找到b，right--找到e</span></span><br><span class="line"><span class="comment">以此类推</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_strlen</span><span class="params">(<span class="type">char</span>* str)</span>  <span class="comment">//模拟字符串的长度计算</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)  <span class="comment">//寻找字符串不等于\0</span></span><br><span class="line">&#123;</span><br><span class="line">count++;  <span class="comment">//字符串长度+1</span></span><br><span class="line">str++;  <span class="comment">//继续寻找下一个字符串</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">return</span> count;  <span class="comment">//返回字符串的个数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse_string</span><span class="params">(<span class="type">char</span>* str)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right = my_strlen(str)<span class="number">-1</span>;  <span class="comment">//求字符串长度-1为最右边元素下标</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right)</span><br><span class="line"><span class="comment">//&#123; </span></span><br><span class="line"><span class="comment">//char tmp = str[left];  //通过下标计算，中间数字交换与否不影响结果</span></span><br><span class="line"><span class="comment">//str[left] = str[right];</span></span><br><span class="line"><span class="comment">//str[right] = tmp;</span></span><br><span class="line"><span class="comment">//left++;</span></span><br><span class="line"><span class="comment">//right--;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#123;  <span class="comment">//利用指针的方式对数据进行解引用，即找到对应元素</span></span><br><span class="line"><span class="type">char</span> tmp = *(str + left);  <span class="comment">//str指向数字的第一个元素，+left表示指针偏移，找到下边为left的元素，然后*解引用操作，得到这个元素</span></span><br><span class="line">*(str + left) = *(str + right);</span><br><span class="line">*(str + right) = tmp;</span><br><span class="line">left++;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">reverse_string(arr);  <span class="comment">//逆序的函数，数组名arr是数组arr首元素的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr);<span class="comment">//fedbca</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用递归实现</span></span><br><span class="line"><span class="comment">//使用递归来实现字符串逆序</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_strlen</span><span class="params">(<span class="type">char</span>* str)</span>  <span class="comment">//模拟字符串的长度计算</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)  <span class="comment">//寻找字符串不等于\0</span></span><br><span class="line">&#123;</span><br><span class="line">count++;  <span class="comment">//字符串长度+1</span></span><br><span class="line">str++;  <span class="comment">//继续寻找下一个字符串</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">return</span> count;  <span class="comment">//返回字符串的个数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">reverse_string</span><span class="params">(<span class="type">char</span>* str)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> tmp = *str;</span><br><span class="line"><span class="type">int</span> len = my_strlen(str);</span><br><span class="line">*str = *(str + len - <span class="number">1</span>);</span><br><span class="line">*(str + len - <span class="number">1</span>) = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="comment">//判断条件</span></span><br><span class="line"><span class="keyword">if</span> (my_strlen(str + <span class="number">1</span>) &gt;= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">reverse_string(str + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">*(str + len - <span class="number">1</span>) = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">reverse_string(arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5）求一个数的每一位数相加"><a href="#5）求一个数的每一位数相加" class="headerlink" title="5）求一个数的每一位数相加"></a>5）求一个数的每一位数相加</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求一个数的所有位相加的和</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">/*实现思路</span></span><br><span class="line"><span class="comment">DigitSum(1729)</span></span><br><span class="line"><span class="comment">DigitSum(172) + 9（1729%10）=9</span></span><br><span class="line"><span class="comment">DigitSum(17)+ 2 + 9（172%10）=2</span></span><br><span class="line"><span class="comment">DigitSum(1）+7 + 2 + 9（17%10）=7</span></span><br><span class="line"><span class="comment">1+2+7+9</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">DigitSum</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> DigitSum(n / <span class="number">10</span>) + n % <span class="number">10</span>; <span class="comment">//n/10表示十位数（或者以上位数），n%10表示剥离下来的数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> n;  <span class="comment">//为一位数的时候直接返回n</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">1729</span>;</span><br><span class="line"><span class="type">int</span> sum = DigitSum(num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6）求n的k次方的结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求n的k次方的结果</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">/*实现思路</span></span><br><span class="line"><span class="comment">Pow（n,k）=n*Pow(n,k-1)=n^k-1*k=n^k</span></span><br><span class="line"><span class="comment">如果k等于0的话，即n的0次方结果为1</span></span><br><span class="line"><span class="comment">当k大于0的时候，即n的k次方等于n的k减一次方乘以k</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Pow</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (k &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> n * Pow(n, k - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>  <span class="comment">//实现负数次方的运算</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1.0</span> / (Pow(n, -k));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="type">double</span> ret = Pow(n, k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, ret);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c-learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 c-learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言-goto语句</title>
      <link href="/2023/03/20/goto%E8%AF%AD%E5%8F%A5/"/>
      <url>/2023/03/20/goto%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="1：含义"><a href="#1：含义" class="headerlink" title="1：含义"></a>1：含义</h2><p>C语言中提供了可以随意滥用的goto语句和标记跳转的标号</p><p>在某些场景下需要使用goto语句，一般应用在多层循环嵌套中，可以直接跳出到最外层循环，其他场景不建议使用</p><p>goto语句只能在一个函数范围内跳转，不能跨函数</p><h2 id="2：示例"><a href="#2：示例" class="headerlink" title="2：示例"></a>2：示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关机程序</span></span><br><span class="line"><span class="comment">//只要运行起来，电脑在1分钟内关机，如果输入：取消关机，则去取消关机</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//shutdown -a 取消定时关机</span></span><br><span class="line"><span class="comment">//shutdown -s -t 60 在1分钟后关机</span></span><br><span class="line"><span class="comment">//system()---用来执行系统命令,头文件stdlib.h</span></span><br><span class="line"><span class="type">char</span> input[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">system(<span class="string">&quot;shutdown -s -t 60&quot;</span>);</span><br><span class="line">again:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;电脑在1分钟后关机，输入取消关机则取消本次关机\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, input);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(input, <span class="string">&quot;取消关机&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">&quot;shutdown -a&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> again;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> input[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">system(<span class="string">&quot;shutdown -s -t 120&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)  <span class="comment">//使用循环来进行判断，如果输入正确，则跳出循环</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;你的电脑将在2分钟后关机，如果需要取消，则输入“取消关机”即可\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, input);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(input,<span class="string">&quot;取消关机&quot;</span>) ==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">&quot;shutdown -a&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c-learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 c-learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言-结构体详解</title>
      <link href="/2023/03/12/%E7%BB%93%E6%9E%84%E4%BD%93%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/03/12/%E7%BB%93%E6%9E%84%E4%BD%93%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="1：结构是什么"><a href="#1：结构是什么" class="headerlink" title="1：结构是什么"></a>1：结构是什么</h2><p>数组是一组相同的类型的结合</p><p>结构体是一些值的集合，但是值的类型可以不同</p><h2 id="2：结构体的创建初始化与使用"><a href="#2：结构体的创建初始化与使用" class="headerlink" title="2：结构体的创建初始化与使用"></a>2：结构体的创建初始化与使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">short</span> s;</span><br><span class="line"><span class="type">double</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//结构体成员变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span> <span class="title">sb</span>;</span>   <span class="comment">//结构体的成员也可以是其他结构体</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>]; <span class="comment">//名字</span></span><br><span class="line"><span class="type">int</span> age; <span class="comment">//年龄</span></span><br><span class="line"><span class="type">char</span> id[<span class="number">20</span>]; <span class="comment">//学号</span></span><br><span class="line"></span><br><span class="line">&#125; s1,s2;  <span class="comment">//s1,s2也是创建的结构体变量,是全局变量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s</span> =</span> &#123; &#123;<span class="string">&#x27;w&#x27;</span>,<span class="number">20</span>,<span class="number">3.14</span>&#125;,<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>,<span class="string">&quot;20230327&quot;</span>&#125;;  <span class="comment">//使用结构体创建了一个s对象并初始化</span></span><br><span class="line"><span class="comment">//&#123;&#x27;w&#x27;,20,3.14&#125;标识对struct B sb结构体进行初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体成员访问</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;字符：%c\n&quot;</span>, s.sb.c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;姓名：%s\n&quot;</span>, s.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;年龄：%d\n&quot;</span>, s.age);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体指针变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span>* <span class="title">ps</span> =</span> &amp;s;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;字符：%c\n&quot;</span>, (*ps).sb.c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;字符：%c\n&quot;</span>, ps-&gt;sb.c);  <span class="comment">//通过-&gt;指针访问</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3：结构体传参"><a href="#3：结构体传参" class="headerlink" title="3：结构体传参"></a>3：结构体传参</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体传参</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">short</span> s;</span><br><span class="line"><span class="type">double</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span> <span class="title">sb</span>;</span>   </span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>]; <span class="comment">//名字</span></span><br><span class="line"><span class="type">int</span> age; <span class="comment">//年龄</span></span><br><span class="line"><span class="type">char</span> id[<span class="number">20</span>]; <span class="comment">//学号</span></span><br><span class="line"></span><br><span class="line">&#125; s1,s2;  <span class="comment">//s1,s2也是创建的结构体变量,是全局变量</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print1</span><span class="params">(<span class="keyword">struct</span> Stu t)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c %d %lf %s %d %s\n&quot;</span>, t.sb.c, t.sb.s, t.sb.d, t.name,t.age,t.id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print2</span><span class="params">(<span class="keyword">struct</span> Stu* ps)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c %d %lf %s %d %s\n&quot;</span>, ps-&gt;sb.c, ps-&gt;sb.s, ps-&gt;sb.d, ps-&gt;name, ps-&gt;age, ps-&gt;id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s</span> =</span> &#123; &#123;<span class="string">&#x27;w&#x27;</span>,<span class="number">20</span>,<span class="number">3.14</span>&#125;,<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>,<span class="string">&quot;20230327&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//写一个函数打印s的内容</span></span><br><span class="line">print1(s);  <span class="comment">//实现一个打印函数，传递一个结构体变量,传值调用</span></span><br><span class="line">print2(&amp;s);  <span class="comment">//传递一个结构体指针变量，传址调用</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述函数中，print2的函数更优，即传值更优</p><p>函数传参的时候，参数是需要压栈的，如果传递一个结构体对象的时候，结构体过大，参数压栈的系统开销比较大，会导致性能的下降</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">栈：是一种数据结构，先进的后出，后进的先出</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">压栈：放入数据的过程</span><br><span class="line">出栈：删除数据的过程</span><br></pre></td></tr></table></figure><p>每一个函数调用都会在内存的栈区上开辟一块空间，在这个函数内的变量则会创建在这个函数的空间内</p><p>内存分为：栈区，堆区，静态区</p>]]></content>
      
      
      <categories>
          
          <category> c-learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 c-learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian镜像的下载</title>
      <link href="/2023/03/12/Debian%20DLBD%E9%95%9C%E5%83%8F%E7%9A%84%E4%B8%8B%E8%BD%BD/"/>
      <url>/2023/03/12/Debian%20DLBD%E9%95%9C%E5%83%8F%E7%9A%84%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://gitee.com/sweetheart-dyf/">Gitee主页</a><br><a href="https://github.com/sweetheart-dyf/">Github主页</a><br><a href="https://blog.csdn.net/weixin_54892866/">CSDN地址</a></p></blockquote><h2 id="1：安装虚拟机"><a href="#1：安装虚拟机" class="headerlink" title="1：安装虚拟机"></a>1：安装虚拟机</h2><p>首先安装一个debian任意版本的虚拟机，<code>并给至少80G以上的硬盘空间，建议100G</code>，镜像大小接近50G，虚拟机需要20G左右，为避免其他各种原因，建议新装一个虚拟机来下载镜像</p><p><img src="/img/image-20221205215602002.png" alt="image-20221205215602002"></p><h2 id="2：安装虚拟机"><a href="#2：安装虚拟机" class="headerlink" title="2：安装虚拟机"></a>2：安装虚拟机</h2><p>虚拟机的安装步骤与普通虚拟机安装一致即可</p><p>选择第二个安装，也可以选择第一个图形化安装</p><p><img src="/img/image-20221205215735147.png" alt="image-20221205215735147"></p><p>以下部分可以根据自己需求选择，我这里直接默认</p><p><img src="/img/image-20221205215752631.png" alt="image-20221205215752631"></p><p><img src="/img/image-20221205215801916.png" alt="image-20221205215801916"></p><p><img src="/img/image-20221205215814284.png" alt="image-20221205215814284"></p><p>后续会自动DHCP获取网络，如果获取失败，可以选择不连接网络，安装完成后在进行配置</p><p>主机名</p><p><img src="/img/image-20221205220016150.png" alt="image-20221205220016150"></p><p>域名</p><p><img src="/img/image-20221205220028133.png" alt="image-20221205220028133"></p><p>root密码</p><p><img src="/img/image-20221205220043149.png" alt="image-20221205220043149"></p><p>确认root密码</p><p><img src="/img/image-20221205220058694.png" alt="image-20221205220058694"></p><p>创建一个新用户</p><p><img src="/img/image-20221205220117660.png" alt="image-20221205220117660"></p><p>默认即可</p><p><img src="/img/image-20221205220132230.png" alt="image-20221205220132230"></p><p>新用户密码</p><p><img src="/img/image-20221205220144983.png" alt="image-20221205220144983"></p><p>确认新用户密码</p><p><img src="/img/image-20221205220202789.png" alt="image-20221205220202789"></p><p>默认</p><p><img src="/img/image-20221205220215147.png" alt="image-20221205220215147"></p><p>选择使用磁盘</p><p><img src="/img/image-20221205220250762.png" alt="image-20221205220250762"></p><p>默认</p><p><img src="/img/image-20221205220258768.png" alt="image-20221205220258768">、</p><p>选择一个分区</p><p><img src="/img/image-20221205220317954.png" alt="image-20221205220317954"></p><p>接受更改</p><p><img src="/img/image-20221205220334395.png" alt="image-20221205220334395"></p><p>确定</p><p><img src="/img/image-20221205220346269.png" alt="image-20221205220346269"></p><p>等待系统进行安装</p><p>不需要网络镜像源</p><p><img src="/img/image-20221205220841022.png" alt="image-20221205220841022"></p><p>勾选桌面环境，桌面，ssh服务等（按空格选择取消）</p><p><img src="/img/image-20221205220933337.png" alt="image-20221205220933337"></p><p>等待安装</p><p>选择yes</p><p><img src="/img/image-20221205221655695.png" alt="image-20221205221655695"></p><p>选择磁盘</p><p><img src="/img/image-20221205221707601.png" alt="image-20221205221707601"></p><p>重启</p><p><img src="/img/image-20221205221724790.png" alt="image-20221205221724790"></p><p>重启后进入图形界面，默认不能以root用户登录，需要以普通身份用户登录</p><p>按键盘上的徽标键或者点击active，搜索terminal并选择进入</p><p><img src="/img/image-20221205221904003.png" alt="image-20221205221904003"></p><p>连接到光盘。默认即可安装软件，可以按照open-vmtools来协同物理机与虚拟机剪切板</p><h2 id="3：配置网络"><a href="#3：配置网络" class="headerlink" title="3：配置网络"></a>3：配置网络</h2><p>切换用户与软件安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">demo@debian:~$ su - root</span><br><span class="line">Password: </span><br><span class="line">root@debian:~<span class="comment"># </span></span><br><span class="line">root@debian:~<span class="comment"># apt install open-vm-tools  //按安装vmtools工具</span></span><br><span class="line">root@debian:~<span class="comment"># apt install bash*  //如果命令无法补全安装，安装完成后重启</span></span><br><span class="line">root@debian:~<span class="comment"># apt install vim -y  //安装vim编辑器</span></span><br></pre></td></tr></table></figure><p>配置网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@debian:~<span class="comment"># ip addr  #查看网卡名称</span></span><br></pre></td></tr></table></figure><p>查看网卡名称</p><p><img src="/img/image-20221205222513710.png" alt="image-20221205222513710"></p><p>修改网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@debian:~<span class="comment"># vim /etc/network/interfaces</span></span><br><span class="line">auto ens33</span><br><span class="line">iface ens33 inet static</span><br><span class="line">address 192.168.196.152/24</span><br><span class="line">gateway 192.168.196.2</span><br><span class="line">dns-nameserver 223.5.5.5</span><br><span class="line">root@debian:~<span class="comment"># ping baidu.com -c 2  //ping测试，确保能通</span></span><br></pre></td></tr></table></figure><h2 id="4：配置apt源"><a href="#4：配置apt源" class="headerlink" title="4：配置apt源"></a>4：配置apt源</h2><p>进入<a href="https://developer.aliyun.com/mirror/debian?spm=a2c6h.13651102.0.0.3e221b11ZapATm">阿里开源镜像站</a>，根据对应的debian版本选择源</p><p>debian10源如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.aliyun.com/debian/ buster main non-free contrib</span><br><span class="line">deb-src https://mirrors.aliyun.com/debian/ buster main non-free contrib</span><br><span class="line">deb https://mirrors.aliyun.com/debian-security buster/updates main</span><br><span class="line">deb-src https://mirrors.aliyun.com/debian-security buster/updates main</span><br><span class="line">deb https://mirrors.aliyun.com/debian/ buster-updates main non-free contrib</span><br><span class="line">deb-src https://mirrors.aliyun.com/debian/ buster-updates main non-free contrib</span><br><span class="line">deb https://mirrors.aliyun.com/debian/ buster-backports main non-free contrib</span><br><span class="line">deb-src https://mirrors.aliyun.com/debian/ buster-backports main non-free contrib</span><br></pre></td></tr></table></figure><p>修改yum源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@debian:~<span class="comment"># vim /etc/apt/sources.list  //注销掉之前所有的内容</span></span><br><span class="line">添加上面阿里的镜像源进去</span><br><span class="line">root@debian:~<span class="comment"># apt update  //更新源</span></span><br></pre></td></tr></table></figure><p>将阿里的源放在最前</p><p><img src="/img/image-20221205223823884.png" alt="image-20221205223823884"></p><h2 id="5：镜像下载"><a href="#5：镜像下载" class="headerlink" title="5：镜像下载"></a>5：镜像下载</h2><p>安装镜像下载工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@debian:~<span class="comment"># apt install jigdo-file -y</span></span><br></pre></td></tr></table></figure><p>进入阿里下debian的镜像仓库，进入<a href="https://mirrors.aliyun.com/debian-cd/current/amd64/jigdo-dlbd/">debian镜像源</a></p><p>找到我们所需要的文件，右键复制连接<a href="https://mirrors.aliyun.com/debian-cd/current/amd64/jigdo-dlbd/debian-11.5.0-amd64-DLBD-1.jigdo?spm=a2c6h.25603864.0.0.2344718fawq4DO">debian-11.5.0-amd64-DLBD-1.jigdo</a></p><p><img src="/img/image-20221205224126992.png" alt="image-20221205224126992"></p><p>运行程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@debian:~<span class="comment"># jigdo-lite    //运行程序</span></span><br><span class="line"></span><br><span class="line">Jigsaw Download <span class="string">&quot;lite&quot;</span></span><br><span class="line">Copyright (C) 2001-2005  |  jigdo@</span><br><span class="line">Richard Atterer          |  atterer.org</span><br><span class="line">Getting mirror information from /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line">To resume a half-finished download, enter name of .jigdo file.</span><br><span class="line">To start a new download, enter URL of .jigdo file.</span><br><span class="line">You can also enter several URLs/filenames, separated with spaces,</span><br><span class="line">or enumerate <span class="keyword">in</span> &#123;&#125;, e.g. `http://server/cd-&#123;1_NONUS,2,3&#125;.jigdo<span class="string">&#x27;</span></span><br><span class="line"><span class="string">jigdo: https://mirrors.aliyun.com/debian-cd/current/amd64/jigdo-dlbd/debian-11.5.0-amd64-DLBD-1.jigdo?spm=a2c6h.25603864.0.0.2344718fawq4DO   //粘贴我们复制的debian-11.5.0-amd64-DLBD-1.jigdo地址回车</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Alternatively, just press enter if you want to start downloading</span></span><br><span class="line"><span class="string">the remaining files.</span></span><br><span class="line"><span class="string">Files to scan:    //直接回车</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">States&#x27;</span>, or a server name like `sunsite<span class="string">&#x27;.</span></span><br><span class="line"><span class="string">Debian mirror [https://mirrors.aliyun.com/debian/]:    //镜像源地址，如果不是阿里的就复制阿里的镜像源地址粘贴回车即可</span></span><br></pre></td></tr></table></figure><p>后续则等待自动下载整合即可，中途不能断网，关机，挂起等操作。容易出现问题</p><p>下载的时间比较长，具体根据当前网速来确定</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>允许root用户桌面环境直接登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@debian:~<span class="comment"># vim /etc/pam.d/gdm-password </span></span><br><span class="line"><span class="comment">#%PAM-1.0</span></span><br><span class="line">auth    requisite       pam_nologin.so</span><br><span class="line">authrequiredpam_succeed_if.so user = root quiet_success   //去掉=之前的!即可，重启生效</span><br></pre></td></tr></table></figure><p>允许远程ssh以root身份登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@debian:~<span class="comment"># vim /etc/ssh/sshd_config </span></span><br><span class="line"><span class="comment">#LoginGraceTime 2m</span></span><br><span class="line"><span class="comment">#PermitRootLogin prohibit-password   //去掉#号并将prohibit-password修改为yes</span></span><br><span class="line"><span class="comment">#StrictModes yes</span></span><br><span class="line"><span class="comment">#MaxAuthTries 6</span></span><br><span class="line"><span class="comment">#MaxSessions 10</span></span><br><span class="line">***********************************************************************</span><br><span class="line">修改后</span><br><span class="line"></span><br><span class="line"><span class="comment">#LoginGraceTime 2m</span></span><br><span class="line">PermitRootLogin <span class="built_in">yes</span>  //修改后</span><br><span class="line"><span class="comment">#StrictModes yes</span></span><br><span class="line"><span class="comment">#MaxAuthTries 6</span></span><br><span class="line"><span class="comment">#MaxSessions 10</span></span><br><span class="line">root@debian:~<span class="comment"># systemctl restart ssh  //重启ssh服务即可</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言-分支语句与循环语句</title>
      <link href="/2023/03/11/%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5%E4%B8%8E%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
      <url>/2023/03/11/%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5%E4%B8%8E%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://gitee.com/sweetheart-dyf/">Gitee主页</a><br><a href="https://github.com/sweetheart-dyf/">Github主页</a><br><a href="https://blog.csdn.net/weixin_54892866/">CSDN地址</a></p></blockquote><p>分支语句：if switch</p><p>循环语句：while, for ,do while</p><h2 id="1：if分支语句"><a href="#1：if分支语句" class="headerlink" title="1：if分支语句"></a>1：if分支语句</h2><p>if 双分支语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(age&gt;=<span class="number">18</span>)     <span class="comment">//if，esle是双分支结构</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;成年\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未成年\n&quot;</span>);  </span><br><span class="line"><span class="comment">//对于需要有多句内容输出，需要用&#123;&#125;包括起来，即属于else的分支</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if多分支语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> age = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">if</span> (age &lt; <span class="number">18</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;少年\n&quot;</span>); </span><br><span class="line">    <span class="comment">//对于多个语句。可以使用&#123;&#125;包含</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (age &gt;= <span class="number">18</span> &amp;&amp; age &lt; <span class="number">26</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;青年\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (age &gt;= <span class="number">26</span> &amp;&amp; age &lt; <span class="number">40</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;中年\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (age &gt;= <span class="number">40</span> &amp;&amp; age &lt; <span class="number">60</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;壮年\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;老年\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>c语言中表示真假：0表示假，非0表示真</code></p><p>else匹配原则为匹配最近的一个if</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (b ==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;haha\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>  <span class="comment">//else的匹配原则，匹配最近的一个if，并不是与哪个if对其就使用哪个</span></span><br><span class="line">&#123;  <span class="comment">//添加&#123;&#125;使格式更加的明确</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//没有任何输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码1</span></span><br><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line"><span class="comment">//代码2</span></span><br><span class="line"><span class="keyword">if</span>(condition)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span></span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两种代码实现结果一样</span></span><br></pre></td></tr></table></figure><p>&#x3D;是赋值，&#x3D;&#x3D;表示是否相等</p><p>if (5 &#x3D;&#x3D; num) ，将常量放在左边，此时只能判断相等，不能进行作为赋值，优化代码</p><ul><li>示例，判断一个数是否为基数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">if</span> (num%<span class="number">2</span> == <span class="number">1</span>)  <span class="comment">//%表示取模，余是否为1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;奇数\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;不是奇数\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>示例：打印出1-100之间的奇数</p></li><li><p>&#96;&#96;&#96;c<br>方法一<br>#include &lt;stdio.h&gt;<br>int main()<br>{</p><pre><code>int i = 0;for (i = 1; i&lt;=100; i++)  //利用for循环&#123;    if (i %2 == 1)  //利用%来取模&#125;return 0;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```c</span><br><span class="line">方法二：</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int i = 1;</span><br><span class="line">for (i = 1; i &lt;= 100; i+=2) //i从1开始，每次加2，为奇数</span><br><span class="line">//for (int i = 1;i &lt;= 100; i+=2)  //此种写法部分编译器支持</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d &quot;,i); </span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2：switch"><a href="#2：switch" class="headerlink" title="2：switch"></a>2：switch</h2><p>case语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> day = <span class="number">0</span>;  <span class="comment">//只能为整型</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;day);</span><br><span class="line"><span class="keyword">switch</span> (day)  <span class="comment">//day为整型表达式</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//语句项，从上往下读取，day为多少，即从多少开始循环</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;星期一\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;     <span class="comment">//中断循环，跳出某个分支循环</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;星期二\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;星期三\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;星期四\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;星期五\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;星期六\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;星期日\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> day = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;day);</span><br><span class="line"><span class="keyword">switch</span> (day)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;工作日\n&quot;</span>);  <span class="comment">//1-5显示工作日</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;休息日\n&quot;</span>);  <span class="comment">//6，7显示休息日</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">default</span>:    <span class="comment">//默认选项。即不匹配上面的选项，顺序只要满足自己的需求即可</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入错误\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>示例，switch语句</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> m = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span> (n)  <span class="comment">//进入的时候，n为1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: m++;  <span class="comment">//m=2+1=3</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: n++;  <span class="comment">//n=1+1=2</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: </span><br><span class="line"><span class="keyword">switch</span> (n)  <span class="comment">//switch 允许嵌套使用</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:   <span class="comment">//n=2，跳过这个循环</span></span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: m++;n++;  <span class="comment">//n进入此处，此时m+1=4.n+1=3</span></span><br><span class="line"><span class="keyword">break</span>;  <span class="comment">//跳出switch循环</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:  <span class="comment">//进入此循环</span></span><br><span class="line">m++;  <span class="comment">//m=4+1=5</span></span><br><span class="line"><span class="keyword">break</span>; <span class="comment">//跳出case4循环</span></span><br><span class="line"><span class="keyword">default</span>:  <span class="comment">//最后默认结果</span></span><br><span class="line"><span class="keyword">break</span>;  <span class="comment">//跳出switch (n)循环</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;m = %d,n =%d\n&quot;</span>,m,n);  <span class="comment">//因此m=5，n=3</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3：while循环语句"><a href="#3：while循环语句" class="headerlink" title="3：while循环语句"></a>3：while循环语句</h2><p><code>在while的循环中，continue的作用是跳过本次循环,直接去判断部分，看是否进行下一次的循环</code></p><p><code>break用于永久的终止循环</code></p><p>while，do while ，for</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>（表达式） <span class="comment">//表达式为真，循环语句才执行</span></span><br><span class="line">循环语句：</span><br></pre></td></tr></table></figure><ul><li>示例，简单的while循环</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= <span class="number">10</span>)  <span class="comment">//表达式为真则循环，0为假，非0为真</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);  <span class="comment">//打印结果为1-10</span></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>示例，getchar</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getchar,标准输入（键盘）</span></span><br><span class="line"><span class="comment">//使用ctrl+z 读取结束</span></span><br><span class="line"><span class="comment">//输入字符后回车，相当于将  字符/n  放入缓冲区</span></span><br><span class="line"><span class="comment">//EOF  ---end of file --文件的结束标志，读取错误的时候输出</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ch = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((ch = getchar()) != EOF)  <span class="comment">//条件不相等时为真</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">putchar</span>(ch);  <span class="comment">//输出一个字符到屏幕上</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>示例，模拟确认密码输入</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> password[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入密码:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,password);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请确认密码【Y/N】:\n&quot;</span>);</span><br><span class="line"><span class="type">int</span> ch = getchar();  <span class="comment">//定义输入的字符为ch</span></span><br><span class="line"><span class="keyword">if</span> (ch ==<span class="string">&#x27;Y&#x27;</span>)  <span class="comment">//如果输入的字符等于Y</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;确认成功\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;确认失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时允许会发现无法确认</p><p><img src="/img/image-20230316125953305.png" alt="image-20230316125953305"></p></li></ul><p>其原因是：getchar与scanf是输入函数，从缓冲区拿到数据，如果getchar或者sacnf发现缓冲区存在内容，则拿取到内容放入函数，在此题中输入123456和回车（\N），scanf拿去输入到的内容123456，留下一个\n（换行），getchar则直接将\n放入自己的函数中</p><p>问题解决：清空缓冲区</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> password[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入密码:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,password);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请确认密码【Y/N】:&quot;</span>);</span><br><span class="line">    getchar(); <span class="comment">//清理缓冲器，处理\n，但此时密码之间不能存在空格等</span></span><br><span class="line"><span class="type">int</span> ch = getchar();  <span class="comment">//定义输入的字符为ch</span></span><br><span class="line"><span class="keyword">if</span> (ch ==<span class="string">&#x27;Y&#x27;</span>)  <span class="comment">//如果输入的字符等于Y</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;确认成功\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;确认失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果存在空格，例如输入：123456  adc这种，scanf只拿去前面的内容123456，charget只能处理一个字符，后面还剩余且存在&#x2F;n，因此依旧会报错</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> password[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入密码:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, password);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请确认密码【Y/N】:&quot;</span>);</span><br><span class="line"> <span class="comment">//清理缓冲区多个字符，处理\n</span></span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;  <span class="comment">//等待scanf将内容读取完成后，利用while循环，如果读取到getchar的内容不是\n，则一直循环直到最后只剩余\n，对于循环到的字符，不做任何处理</span></span><br><span class="line"><span class="keyword">while</span> ((tmp = getchar()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ch = getchar();  <span class="comment">//定义输入的字符为ch</span></span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;Y&#x27;</span>)  <span class="comment">//如果输入的字符等于Y</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;确认成功\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;确认失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;-</span><br></pre></td></tr></table></figure><ul><li><p>示例：当输入的是数字时，打印出输入，为其他的时候，不打印内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ch = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((ch = getchar()) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">putchar</span>(ch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/img/image-20230316132355448.png" alt="image-20230316132355448"></p><h2 id="4：for循环"><a href="#4：for循环" class="headerlink" title="4：for循环"></a>4：for循环</h2><h3 id="1：语法"><a href="#1：语法" class="headerlink" title="1：语法"></a>1：语法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (表达式<span class="number">1</span>；表达式<span class="number">2</span>；表达式<span class="number">3</span>)</span><br><span class="line">循环语句；</span><br><span class="line"><span class="comment">//表达式1：初始化</span></span><br><span class="line"><span class="comment">//表达式2：判断</span></span><br><span class="line"><span class="comment">//表达式3：调整</span></span><br></pre></td></tr></table></figure><h3 id="2：示例"><a href="#2：示例" class="headerlink" title="2：示例"></a>2：示例</h3><p>使用for循环打印1-10</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用for循环打印1-10</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line"><span class="comment">//break;  //break跳出循环</span></span><br><span class="line"><span class="keyword">continue</span>;  <span class="comment">//continue跳出本次循环，即等于5的时候跳过，继续下面的运算</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for语句循环体的控制建议</p><ul><li><p>不可在for循环体内部改变变量，防止for循环失去控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">即循环体内重新给变量赋值，或者在循环体内再次嵌套循环，改变外层循环变量</span><br></pre></td></tr></table></figure></li><li><p>建议for语句的循环变量的取值采用“前闭后开区间”写法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br></pre></td></tr></table></figure></li></ul><h3 id="3：for循环的变种"><a href="#3：for循环的变种" class="headerlink" title="3：for循环的变种"></a>3：for循环的变种</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (;;)  <span class="comment">//省略初始化，判断与调整，因为省略了判断，此时表达式恒为真，即一直循环结果</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时打印9个，外循环3，内循环3，最终为9个</p><p><img src="/img/image-20230320120605124.png" alt="image-20230320120605124"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (; j &lt; <span class="number">3</span>; j++)  <span class="comment">//此时打印3个，具体原因是j未初始化，第一次循环完后j=3，后续循环到此的时候，j=3不小于3，循环截至</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/image-20230320120827398.png" alt="image-20230320120827398"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//循环多少次，答案按是0，原因是for循环表达式中，k=0是赋值，0表示假，假则不进行循环，所以循环0次</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, k = <span class="number">0</span>; k = <span class="number">0</span>; i++, k++)</span><br><span class="line">k++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5：do-while"><a href="#5：do-while" class="headerlink" title="5：do while"></a>5：do while</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">循环语句;</span><br><span class="line"><span class="keyword">while</span>(表达式);</span><br><span class="line"><span class="comment">//先执行在判断</span></span><br></pre></td></tr></table></figure><p>打印1-10</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>死循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line"><span class="keyword">continue</span>;  <span class="comment">//跳过后面所有的代码，如果是break，则打印1234后跳出循环</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>do shilw语句的特点，循环语句至少循环一次</code></p><h2 id="6：练习题目"><a href="#6：练习题目" class="headerlink" title="6：练习题目"></a>6：练习题目</h2><h3 id="1）计算n的阶乘"><a href="#1）计算n的阶乘" class="headerlink" title="1）计算n的阶乘"></a>1）计算n的阶乘</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//阶乘1*2*3*4*5=120</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">ret *= i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/image-20230320122834942.png" alt="image-20230320122834942"></p><h3 id="2）计算1-2-3"><a href="#2）计算1-2-3" class="headerlink" title="2）计算1!+2!+3!"></a>2）计算1!+2!+3!</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//3!=3*2!</span></span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">1</span>; n &lt;= <span class="number">3</span>; n++)</span><br><span class="line">&#123;</span><br><span class="line">ret *= n;</span><br><span class="line">sum += ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）在一个有序数组中查找某个数字（二分查找）"><a href="#3）在一个有序数组中查找某个数字（二分查找）" class="headerlink" title="3）在一个有序数组中查找某个数字（二分查找）"></a>3）在一个有序数组中查找某个数字（二分查找）</h3><p>示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>数字从左到右，左边第一个元素的下标为0，后面为1，以此类推</p><p>因此采用取每次取中间值的办法来寻找</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例如</span><br><span class="line"><span class="number">1</span><span class="number">-10</span> <span class="number">10</span>个数字，</span><br><span class="line">left=<span class="number">0</span>，right=<span class="number">9</span>  <span class="comment">//下标，最左边为0，最右边为9</span></span><br><span class="line">mid=（<span class="number">0</span>+<span class="number">9</span>）/<span class="number">2</span>=<span class="number">4</span>  <span class="comment">//mid表示中位数，即4作为下标的元素 </span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span> k = <span class="number">7</span>;<span class="comment">//需要查找的数字，即查找k的值</span></span><br><span class="line"><span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);  <span class="comment">//总大小除以一个元素的大小则等于数组元素的个数</span></span><br><span class="line"><span class="comment">//sizeof(arr)数组总大小 ，int类型为4字节，这里计算总字节数</span></span><br><span class="line"><span class="comment">//sizeof(arr[0])计算一个元素的大小</span></span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right = sz<span class="number">-1</span>; <span class="comment">//数组的个数-1等于右边元素的下标</span></span><br><span class="line"><span class="keyword">while</span>(left&lt;=right)  <span class="comment">//当左边小于等于右边的时候，则说明还有元素可以查找</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid = (left + right) / <span class="number">2</span>;  <span class="comment">//查找中间元素的下标</span></span><br><span class="line"><span class="keyword">if</span> (arr[mid] &lt; k)</span><br><span class="line">&#123; </span><br><span class="line">left = mid + <span class="number">1</span>;  <span class="comment">//因为arr[mid]的元素小于需要取值</span></span><br><span class="line"><span class="comment">//因此则不需要在左边进行查找，mid+1表示从刚刚元素+1后开始计算</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; k)</span><br><span class="line">&#123;</span><br><span class="line">right = mid - <span class="number">1</span>;  <span class="comment">//mid-1表示从mid中位元素左边开始计算</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到元素，下标是%d\n&quot;</span>,mid);</span><br><span class="line"><span class="keyword">break</span>;  <span class="comment">//找到元素后跳出循环</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (left &gt; right)  <span class="comment">//如果坐标元素下标小于右边，则表示不存在这个数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;不存在\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4）实现多个字符从两端向中间移动"><a href="#4）实现多个字符从两端向中间移动" class="headerlink" title="4）实现多个字符从两端向中间移动"></a>4）实现多个字符从两端向中间移动</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span>  <span class="comment">//strlen的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span>  <span class="comment">//Slepp休眠函数的头文件</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr1[] =  <span class="string">&quot;Welcome to world!!!!!&quot;</span> ;  <span class="comment">//数组的最后有个\n</span></span><br><span class="line"><span class="type">char</span> arr2[] = <span class="string">&quot;#####################&quot;</span> ;</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right = <span class="built_in">strlen</span>(arr1) - <span class="number">1</span>;  <span class="comment">//求出字符串的长度，-1表示最后一个数的下标</span></span><br><span class="line"><span class="keyword">while</span>(left&lt;=right)</span><br><span class="line">&#123; </span><br><span class="line">arr2[left] = arr1[left];</span><br><span class="line">arr2[right] = arr1[right];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr2);</span><br><span class="line">Sleep(<span class="number">1000</span>); <span class="comment">//休眠1000ms</span></span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>); <span class="comment">//清空屏幕</span></span><br><span class="line">left++;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5）模拟密码输入"><a href="#5）模拟密码输入" class="headerlink" title="5）模拟密码输入"></a>5）模拟密码输入</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  <span class="comment">//strcmp函数的头文件</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> password[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">//假设正确的密码为123456</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, password);<span class="comment">//此处使用char，因此不需要&amp;取地址符号</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(password, <span class="string">&quot;123456&quot;</span>) == <span class="number">0</span>)  <span class="comment">//strcmp用于字符串的比较，两个字符相等，即为0，则表示两个字符串一致</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;登录成功\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;密码输入错误，请重新输入\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;三次输入错误，退出\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6：猜数字游戏"><a href="#6：猜数字游戏" class="headerlink" title="6：猜数字游戏"></a>6：猜数字游戏</h2><p>该程序会自动生成一个100以内的数字，如果猜对了则提示猜对了，游戏结束。如果猜错了，则提示猜大了或者猜小了，继续猜直到猜对</p><p>游戏可以一直玩，除非退出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  <span class="comment">//rand函数的头文件</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*******************************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;***********1.play*************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;***********0.exit**************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*******************************\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//猜数字游戏实现过程</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">game</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//1.生成随机数</span></span><br><span class="line"><span class="type">int</span> ret = rand() % <span class="number">100</span>;  <span class="comment">//但是此时每次随机生成的数字都是一样的</span></span><br><span class="line"><span class="comment">//%100的余数是0-99.然后+1,则范围是0-100</span></span><br><span class="line"><span class="comment">//rand函数返回了一个0-32767之间的整数</span></span><br><span class="line"><span class="comment">//2.猜数字</span></span><br><span class="line"><span class="type">int</span> guess = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请猜数字：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;guess);</span><br><span class="line"><span class="keyword">if</span> (guess &lt; ret)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;猜小了\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (guess &gt; ret)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;猜大了\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;猜对了\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">srand((<span class="type">unsigned</span> <span class="type">int</span>)(time(<span class="literal">NULL</span>)));  <span class="comment">//设置一个随机的起点，此时里面的参数需要一个随机值，即变量</span></span><br><span class="line"><span class="comment">//此时可以引入时间戳,使用time函数，返回空值</span></span><br><span class="line"><span class="comment">//unsigned int 强制类型转换</span></span><br><span class="line"><span class="comment">//一次游戏只需要设置一次，因此在循环之前生成即可</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">menu(); <span class="comment">//打印菜单</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line"><span class="keyword">switch</span> (input)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">game();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;退出\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入错误，请重新输入\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (input);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7：将三个数字从大到小排序"><a href="#7：将三个数字从大到小排序" class="headerlink" title="7：将三个数字从大到小排序"></a>7：将三个数字从大到小排序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="keyword">if</span> (a &lt; b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a &lt; c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp = a;</span><br><span class="line">a = c;</span><br><span class="line">c = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (b &lt; c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp = b;</span><br><span class="line">b = c;</span><br><span class="line">c = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d&quot;</span>, a, b, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8：求两个数的最大公约数"><a href="#8：求两个数的最大公约数" class="headerlink" title="8：求两个数的最大公约数"></a>8：求两个数的最大公约数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求两个数的最大公约数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m); <span class="comment">//24 18</span></span><br><span class="line"><span class="comment">//int max = 0;</span></span><br><span class="line"><span class="type">int</span> max = m &gt; n ? n : m;</span><br><span class="line"><span class="comment">//if (m &gt; n)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//max = n;  //获取两个数中的最小值</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//max = m;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m % max == <span class="number">0</span> &amp;&amp; n % max == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;最大公约数是：%d\n&quot;</span>, max);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">max--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9：打印1000-2000之间的闰年"><a href="#9：打印1000-2000之间的闰年" class="headerlink" title="9：打印1000-2000之间的闰年"></a>9：打印1000-2000之间的闰年</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (y = <span class="number">1000</span>; y &lt;= <span class="number">2000</span>; y++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断y是不是闰年</span></span><br><span class="line"><span class="comment">//1.被4整数，不能被100整除</span></span><br><span class="line"><span class="comment">//2.能被400整除</span></span><br><span class="line"><span class="keyword">if</span> (y % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(y % <span class="number">100</span> != <span class="number">0</span>)</span><br><span class="line">&#123; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, y);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (y % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, y);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\ncount = %d &quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法2：</span></span><br><span class="line"><span class="comment">//打印1000-2000的闰年</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (y = <span class="number">1000</span>; y &lt;= <span class="number">2000</span>; y++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断y是不是闰年</span></span><br><span class="line"><span class="comment">//1.被4整数，不能被100整除</span></span><br><span class="line"><span class="comment">//2.能被400整除</span></span><br><span class="line"><span class="keyword">if</span> (((y % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (y % <span class="number">100</span> != <span class="number">0</span>)) || (y % <span class="number">400</span> == <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, y);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\ncount = %d &quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10：求100-200之间的素数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">100</span>; i &lt; <span class="number">200</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断i是否为素数</span></span><br><span class="line"><span class="comment">//2---&gt;i-1之间的数字试着除以i，看看能不能整除</span></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">2</span>; j &lt; i; j++)  <span class="comment">//使用除了1和自身外的其他数字，试除看看能不能整除</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;  <span class="comment">//如果能整除则跳出本次循环</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == j) <span class="comment">//如果其他所有不能整除，只有自身能够整除，则表明这是个素数</span></span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n共有素数：count=%d&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">100</span>; i &lt;= <span class="number">200</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">2</span>; j &lt; i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n共有素数：count=%d&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法3优化</span></span><br><span class="line"><span class="comment">//m=a*b，16=2*8=4*4，a和b中至少有一个数字是&lt;=开平方m的</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">101</span>; i &lt;= <span class="number">200</span>; i+=<span class="number">2</span>)  <span class="comment">//从源头上直接跳过能够除以2的数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">2</span>; j &lt;= <span class="built_in">sqrt</span>(i); j++)</span><br><span class="line"><span class="comment">//qurt是开平方函数，头文件math.h</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n共有素数：count=%d&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10：打印1-100之间含9的数字的次数"><a href="#10：打印1-100之间含9的数字的次数" class="headerlink" title="10：打印1-100之间含9的数字的次数"></a>10：打印1-100之间含9的数字的次数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写一个程序，计算1到100中出现了多少个数字9</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">10</span> == <span class="number">9</span>) <span class="comment">//9，19，29，39……</span></span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i / <span class="number">10</span> == <span class="number">9</span>) <span class="comment">//91，92，93……</span></span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11：计算1-x2F-1-1-x2F-2-1-x2F-3-1-x2F-4-1-x2F-5……-1-x2F-99-1-x2F-100"><a href="#11：计算1-x2F-1-1-x2F-2-1-x2F-3-1-x2F-4-1-x2F-5……-1-x2F-99-1-x2F-100" class="headerlink" title="11：计算1&#x2F;1-1&#x2F;2+1&#x2F;3-1&#x2F;4_1&#x2F;5……+1&#x2F;99-1&#x2F;100"></a>11：计算1&#x2F;1-1&#x2F;2+1&#x2F;3-1&#x2F;4_1&#x2F;5……+1&#x2F;99-1&#x2F;100</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算1/1-1/2+1/3-1/4_1/5……+1/99-1/100</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> sum = <span class="number">0.0</span>;  <span class="comment">//存在小数，使用double类型</span></span><br><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;<span class="comment">//定义一个flag</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*if (i % 2 == 0)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">sum -= 1.0 / i;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123; </span></span><br><span class="line"><span class="comment">sum += 1.0 / i;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">sum += flag * <span class="number">1.0</span> * i;</span><br><span class="line">flag = -flag;  <span class="comment">//默认flag为正，经过上次运算后为负</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="12：求十个整数中的最大值"><a href="#12：求十个整数中的最大值" class="headerlink" title="12：求十个整数中的最大值"></a>12：求十个整数中的最大值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求10个整数中的最大值</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>,<span class="number">-4</span>,<span class="number">-5</span>,<span class="number">-6</span>,<span class="number">-7</span>,<span class="number">-8</span>,<span class="number">-9</span>,<span class="number">-10</span> &#125;; <span class="comment">//不能全是复数</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//int max = 0;  //全正整数时</span></span><br><span class="line"><span class="type">int</span> max = arr[<span class="number">0</span>];<span class="comment">//负数的时候，假设其中一个数最大</span></span><br><span class="line"><span class="comment">//for (i = 0; i &lt;= 10; i++)  //全正整数时</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt; <span class="number">10</span> ; i++)  <span class="comment">//负数的时候，要从第一个开始计算</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &gt; max)</span><br><span class="line">&#123;</span><br><span class="line">max = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, max);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13：乘法口诀表"><a href="#13：乘法口诀表" class="headerlink" title="13：乘法口诀表"></a>13：乘法口诀表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//乘法口诀表</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//行数的控制</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打印一行</span></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%-2d &quot;</span>, i, j, i * j);  <span class="comment">//打印一行,-2d表示左对齐</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="comment">//换行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c-learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 c-learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言-常见关键字与详解</title>
      <link href="/2023/03/11/%E5%B8%B8%E8%A7%81%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%8E%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/03/11/%E5%B8%B8%E8%A7%81%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%8E%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://gitee.com/sweetheart-dyf/">Gitee主页</a><br><a href="https://github.com/sweetheart-dyf/">Github主页</a><br><a href="https://blog.csdn.net/weixin_54892866/">CSDN地址</a></p></blockquote><h2 id="1：常见关键字"><a href="#1：常见关键字" class="headerlink" title="1：常见关键字"></a>1：常见关键字</h2><p>关键字由c语言提供，不能作为变量</p><ul><li><p>auto 是自动的，每一个局部变量都是auto修饰的</p></li><li><p>break，循环中断，中断整个循环</p></li><li><p>char，修饰常变量，不能更改</p></li><li><p>continue，中断当次循环</p></li><li><p>default，默认</p></li><li><p>do，while循环</p></li><li><p>double，双精度</p></li><li><p>enum，枚举</p></li><li><p>extern，声明外部符号</p></li><li><p>float，单精度浮点数</p></li><li><p>for，循环</p></li><li><p>goto ，语句</p></li><li><p>register，寄存器关键字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">register</span> <span class="type">int</span> num = <span class="number">100</span>; <span class="comment">//建议num的值存放在寄存器中</span></span><br></pre></td></tr></table></figure><p>在计算机中，数据可以存放到：寄存器&gt;告诉高速缓存&gt;内存&gt;硬盘&gt;网盘（造价越高，速度越快，空间越小）</p><p>大量频繁被使用的数据，放在寄存器中，提升效率</p></li><li><p>return，返回值</p></li><li><p>short，短整型</p></li><li><p>signed，有符号的 10  -20，unsigned无符号的</p></li><li><p>sizeof，大小</p></li><li><p>static，静态</p></li><li><p>union，联合体（共用体）</p></li><li><p>void 无（空）</p></li></ul><p>define和include都不是关键字，都是预处理指令</p><h2 id="2：常见关键字解释"><a href="#2：常见关键字解释" class="headerlink" title="2：常见关键字解释"></a>2：常见关键字解释</h2><h3 id="（1）typedef"><a href="#（1）typedef" class="headerlink" title="（1）typedef"></a>（1）typedef</h3><p>类型重命名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> u_int</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">u_int num2 = <span class="number">0</span>;  <span class="comment">//两个变量的类型一致</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（2）static"><a href="#（2）static" class="headerlink" title="（2）static"></a>（2）static</h3><h4 id="a-static修饰局部变量"><a href="#a-static修饰局部变量" class="headerlink" title="a. static修饰局部变量"></a>a. static修饰局部变量</h4><p>改变了局部变量的生命周期（本质上是改变了变量的存储类型）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// int a = 1;  //a是局部变量，进入时创建，离开时销毁，每次进入都会虫棍创建,结果为10个2</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> a = <span class="number">1</span>   <span class="comment">//结果为2-11，添加了static后，进入时创建变量，离开时变量不销毁</span></span><br><span class="line">a++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i&lt;<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">test();</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/image-20220813102824320.png" alt="image-20220813102824320"></p><h4 id="b-static修饰全局变量"><a href="#b-static修饰全局变量" class="headerlink" title="b.static修饰全局变量"></a>b.static修饰全局变量</h4><p><code>static修饰全局变量，是的这个全局变量只能在自己所在的源文件（.c）内部可以使用，其他文件不能使用</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//static修饰全局变量</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> g_val; <span class="comment">//声明外部变量</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,g_val);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> g_val = <span class="number">2022</span>; <span class="comment">//static定义全局变量</span></span><br></pre></td></tr></table></figure><p>两个文件需要在同一个工程中，此时，文件无法获取到通工程其他文件的变量</p><p>全局变量，在其他源文件内部可以被使用，是因为全局变量具有外部链接属性</p><p>但是全局变量被static修饰后，就变成了<code>内部链接属性</code>，其他源文件不能连接到这个静态的全局变量</p><h4 id="c-static修饰函数"><a href="#c-static修饰函数" class="headerlink" title="c.static修饰函数"></a>c.static修饰函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;   <span class="comment">//声明函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> sum = Add(a,b)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>,sum);</span><br><span class="line">retuen <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>  <span class="comment">//定义全局函数，使用static进行修饰</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个文件需要在同一个工程中</p><p>static修饰函数，使得函数只能在自己所在的源文件内部使用，不能在其他源文件内部使用</p><p>本质上：static是讲函数的外部连接属性变成了内部连接属性（与static修饰全局变量一致）</p><h2 id="3：define-定义变量和宏"><a href="#3：define-定义变量和宏" class="headerlink" title="3：define 定义变量和宏"></a>3：define 定义变量和宏</h2><p>define是一个预处理指令</p><h3 id="（1）define定义符号"><a href="#（1）define定义符号" class="headerlink" title="（1）define定义符号"></a>（1）define定义符号</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1000   <span class="comment">//define定义符号</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1000   <span class="comment">//define定义符号</span></span></span><br><span class="line"> <span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,MAX);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（2）define定义宏"><a href="#（2）define定义宏" class="headerlink" title="（2）define定义宏"></a>（2）define定义宏</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//define定义宏</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD(X,Y) ((X)+(Y))  <span class="comment">//对于x，y可能是特殊字符，需要使用()包括起来，对于整个宏，也要使用（）将整个宏括起来</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">4</span>*ADD(<span class="number">2</span>,<span class="number">3</span>));  <span class="comment">//计算结果为20</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c-learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 c-learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言-选择语句，函数与操作符</title>
      <link href="/2023/03/11/%E9%80%89%E6%8B%A9%E8%AF%AD%E5%8F%A5%EF%BC%8C%E5%87%BD%E6%95%B0%E4%B8%8E%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
      <url>/2023/03/11/%E9%80%89%E6%8B%A9%E8%AF%AD%E5%8F%A5%EF%BC%8C%E5%87%BD%E6%95%B0%E4%B8%8E%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://gitee.com/sweetheart-dyf/">Gitee主页</a><br><a href="https://github.com/sweetheart-dyf/">Github主页</a><br><a href="https://blog.csdn.net/weixin_54892866/">CSDN地址</a></p></blockquote><p><code>时间顺流而下，生活逆水行舟</code></p><h2 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h2><p>不同的选择对应不同的结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input=<span class="number">0</span>;            <span class="comment">//输入的值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;加入我们:&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;是否好好学习(1/0)?&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line"><span class="keyword">if</span> (input==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;你会找到心仪的工作\n&quot;</span>);</span><br><span class="line">&#125;   <span class="comment">//分支</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;还需要继续加油\n&quot;</span>);</span><br><span class="line">&#125;   <span class="comment">//分支&#123;&#125;可有可无</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/img/%E9%80%89%E6%8B%A9%E8%AF%AD%E5%8F%A5.png" alt="选择语句"></p><h2 id="初识循环语句（while）"><a href="#初识循环语句（while）" class="headerlink" title="初识循环语句（while）"></a>初识循环语句（while）</h2><p>需要进行重复性发生的事情</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> line=<span class="number">0</span>; <span class="comment">//定义一个line变量</span></span><br><span class="line"><span class="keyword">while</span>(line&lt;<span class="number">3000</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;学习写代码:%d\n&quot;</span>,line);  <span class="comment">//%d显示行号</span></span><br><span class="line">line++; <span class="comment">//打印一次，加一次line的数值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (line==<span class="number">3000</span>) <span class="comment">//表示line等于3000时，跳出循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;你可以找到一份好的工作\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/while%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5.png" alt="while循环语句"></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>可以重复调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用函数完成两个数的相加</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>   <span class="comment">//定义一个函数，输入x，y</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> z=<span class="number">0</span>;</span><br><span class="line">z=x+y;</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num1=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> num2=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;num1,&amp;num2);</span><br><span class="line"><span class="type">int</span> sum=Add(num1,num2);  <span class="comment">//引用函数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/img/%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="函数运行结果"></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>定义：一组相同类型的元素的集合</p><p><code>数组使用下标来访问，默认第一个元素下标为0，第二个元素下标为1，以此类推。 </code></p><p>案例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;  <span class="comment">//定义一个数组，将1-10存起来</span></span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i&lt;<span class="number">10</span>)  <span class="comment">//定义一个循环，打印出数组所有的内容</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,arr[i]);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//char ch[5]=&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;&#125;; //不完全初始化，剩余的默认为0</span></span><br><span class="line"><span class="comment">//数组使用下标来访问，默认第一个元素下标为0，第二个元素下标为1，以此类推。访问第一个元素：ch[0]</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组的运行结果</p><p><img src="/img/%E6%95%B0%E7%BB%84%E7%9A%84%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="数组的运行结果"></p><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><h3 id="算数操作符"><a href="#算数操作符" class="headerlink" title="算数操作符"></a>算数操作符</h3><p>&#x3D;&#x3D;+，-，* ，&#x2F;，%&#x3D;&#x3D;</p><ul><li><p>对于&#x2F;来说。想要得到一个为小数的值，需要使用float来定义，使用%f来打印，同时除数与被除数需要至少有一个为小数，例如 ：float a&#x3D;9&#x2F;2.0;即可得到结果为4.5</p></li><li><p>&#96;&#96;&#96;c<br>#include &lt;stdio.h&gt;<br>int main()<br>{<br>float a&#x3D;9&#x2F;2.0; &#x2F;&#x2F;需要有一个数为小数。使用float类型<br>printf(“%f\n”,a);<br>return 0;<br>}<br>&#x2F;&#x2F;运行结果为4.5</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- %---取模（余），案例：int a=9%2;商4余1，所以结果为1</span><br><span class="line"></span><br><span class="line">- ```c</span><br><span class="line">  #include &lt;stdio.h&gt;</span><br><span class="line">  int main()</span><br><span class="line">  &#123;</span><br><span class="line">  //float a=9/2.0; //需要有一个数为小数。使用float类型</span><br><span class="line">  int a=9%2;  //取模操作</span><br><span class="line">  printf(&quot;%d\n&quot;,a);</span><br><span class="line">  return 0;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h3><p>例如：&gt;&gt;–右移操作符，&lt;&lt;—左移操作符，移动的是二进制位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//左移右移操作符</span></span><br><span class="line"><span class="type">int</span> a=<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> b=a&lt;&lt;<span class="number">1</span>;   <span class="comment">//左移操作符，移动的是二进制位</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果为4</span></span><br></pre></td></tr></table></figure><h3 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h3><p>&amp; —-按位与</p><p>| —-按位或</p><p>^  —按位异或</p><h3 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h3><p>&#x3D;，+&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;,^&#x3D;,|&#x3D;,&gt;&gt;&#x3D;,&lt;&lt;&#x3D;</p><h3 id="单目操作符"><a href="#单目操作符" class="headerlink" title="单目操作符"></a>单目操作符</h3><p>双目操作符：a+b，+有两个操作数。</p><p>单目操作符：只有一个操作数</p><p>&#x3D;&#x3D;0表示假，非零表示真，将假变成真的时候，为1&#x3D;&#x3D;</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>！</td><td>取反操作</td></tr><tr><td>-</td><td>负值</td></tr><tr><td>+</td><td>正值</td></tr><tr><td>&amp;</td><td>取地址</td></tr><tr><td>sizeof</td><td>操作数的类型长度（以字节为单位）</td></tr><tr><td>~</td><td>对一个数的二进制位按取反</td></tr><tr><td>–</td><td>前置，后置–</td></tr><tr><td>++</td><td>前置、后置++，先++得出结果，在赋值给变量使用</td></tr><tr><td>*</td><td>间接访问操作符</td></tr><tr><td>(类型)</td><td>强制类型转换</td></tr></tbody></table><h4 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">10</span>; <span class="comment">//表示为真</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,!a);  <span class="comment">//!a取反，结果为0</span></span><br><span class="line"><span class="comment">/*用法    </span></span><br><span class="line"><span class="comment">    if(a)   //a为真的时候，执行下面的操作</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if(!a)   //a为假的时候，执行下面的操作</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sizefo是一个操作符，计算类型或者变量的大小，也可以计算数组的大小，不是函数</code></p><p>计算数组的大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//计算数组的大小</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>]=&#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> sz;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr)); <span class="comment">//计算的是数组的总大小，单位是字节，一个int类型为4字节，所以此处为40字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));<span class="comment">//结果为4</span></span><br><span class="line">sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sz);  <span class="comment">//结果为10</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/img/%E8%AE%A1%E7%AE%97%E6%95%B0%E7%BB%84%E5%A4%A7%E5%B0%8F.png" alt="计算数组大小"></p><h4 id=""><a href="#" class="headerlink" title="~"></a>~</h4><p>&#x3D;&#x3D;~按二进制位取反，把所有的二进制中数字，1变成0，0变成1&#x3D;&#x3D;</p><p>数据在内存中存的是补码，一个整数的二进制表示有三种：原码，反码，补码</p><p>-1的  源码：10000000000000000000000000000001  符号位不变，其他位取反</p><p>​反码：11111111111111111111111111111110</p><p>​补码：11111111111111111111111111111111</p><p>正整数：原码，反码，补码相同</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,~a); <span class="comment">// 结果未-1，~按二进制位取反，把所有的二进制中数字，1变成0，0变成1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果-1</span></span><br></pre></td></tr></table></figure><h4 id="-1"><a href="#-1" class="headerlink" title="++"></a>++</h4><p>&#x3D;&#x3D;先++得出结果，在赋值给变量使用&#x3D;&#x3D;</p><p>&#x3D;&#x3D;后置++是先赋值给变量使用，再++&#x3D;&#x3D;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b=++a;<span class="comment">//前置++，先++计算出结果，再赋值给变量</span></span><br><span class="line"><span class="comment">//后置++是先赋值给变量使用，再++</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/++%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="++运行结果"></p><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a=(<span class="type">int</span>)<span class="number">3.14</span>;  <span class="comment">//强制将浮点型转化成整形，输出结果为3，不添加强制转换会出现警告，将会丢失精度</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h3><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>!&#x3D;</td><td>不等于</td></tr><tr><td>&#x3D;&#x3D;</td><td>相等</td></tr></tbody></table><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><p>&amp;&amp; 逻辑或</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> b=<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> c=a&amp;&amp;b;<span class="comment">//即两边都为真的时候,结果为真，如果有一个为0，结果就为假</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c);  <span class="comment">//输出结果为1真</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>|| 逻辑与</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> b=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> d=a||b;<span class="comment">//逻辑或，即一个为真的时候，结果就为真</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,d);<span class="comment">//输出结果为1真</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h3><p><code>exp1？exp2：exp3</code></p><p>exp1成立，exp2计算，整个表达式的结构是：exp2的结果</p><p>exp1不成立，exp3计算，整个表达式的结构是：exp3的结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b=<span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line"><span class="comment">/*if(a&gt;b)</span></span><br><span class="line"><span class="comment">max=a;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">max=b;</span></span><br><span class="line"><span class="comment">*/</span>  <span class="comment">//可以写成max=a&gt;b?a:b;</span></span><br><span class="line">max=a&gt;b?a:b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,max); <span class="comment">//输出结果3</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>逗号表达式，逗号隔开的一段表达式</p><p>逗号表达式，是从左向右依次计算的，整个表达式的结果是最后一个表达式的结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b=<span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> c=<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> d=(a=b+<span class="number">2</span>,c=a<span class="number">-4</span>,b=c+<span class="number">2</span>);</span><br><span class="line"><span class="comment">//逗号表达式，是从左向右依次计算的，整个表达式的结果是最后一个表达式的结果</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,d);  <span class="comment">//结果为3</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他操作符"><a href="#其他操作符" class="headerlink" title="其他操作符"></a>其他操作符</h3><p>[3]：下标引用操作符，取数组的第三个参数</p><p>()：函数调用操作符，调用函数的时候，函数后面的（）就是函数调用的函数操作符</p>]]></content>
      
      
      <categories>
          
          <category> c-learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 c-learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言-字符串，转义字符与注释</title>
      <link href="/2023/03/11/%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6%E4%B8%8E%E6%B3%A8%E9%87%8A/"/>
      <url>/2023/03/11/%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6%E4%B8%8E%E6%B3%A8%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://gitee.com/sweetheart-dyf/">Gitee主页</a><br><a href="https://github.com/sweetheart-dyf/">Github主页</a><br><a href="https://blog.csdn.net/weixin_54892866/">CSDN地址</a></p></blockquote><p><code>没有人陪你走一辈子，所以你要适应孤独，没有人会帮你一辈子，所以你要一直奋斗</code></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="1）字符串以-0结尾"><a href="#1）字符串以-0结尾" class="headerlink" title="1）字符串以\0结尾"></a>1）字符串以\0结尾</h3><p>字符串就是一串字符，用双引号括起来的一串</p><p>eg：“hello word\n”</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf(&quot;hello word\n&quot;);   //&quot;hello word\n&quot;即为字符串</span></span><br><span class="line"><span class="comment">//char arr[]=&quot;hello&quot;; //字符串在结尾隐藏了一个\0的字符</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> arr1[]=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">char</span> arr2[]=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr2); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;字符串在结尾隐藏了一个\0的字符&#x3D;&#x3D;</p><p>此时arr2出现乱码</p><p><img src="/img/arr2%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81.png" alt="arr2出现乱码"></p><p>手动在arr2的最后添加一个\0，再次运行，即可正常打印</p><p><img src="/img/%E6%89%8B%E5%8A%A8%E6%B7%BB%E5%8A%A0.png" alt="手动添加"></p><h3 id="2：求字符串的长度"><a href="#2：求字符串的长度" class="headerlink" title="2：求字符串的长度"></a>2：求字符串的长度</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span>   <span class="comment">//引入长度的头文件</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">strlen</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,len);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;\0仅仅作为字符串的结束标志，在计算字符串的长度的时候不包含&#x3D;&#x3D;</p><p>运行结果</p><p><img src="/img/%E6%B1%82%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6.png" alt="求字符串长度"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span>   <span class="comment">//引入长度的头文件</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> arr1[]=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">char</span> arr2[]=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">strlen</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,len);   <span class="comment">//打印长度</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(arr1));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(arr2));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>此时arr2的长度打印的结果为随机值，即找到以\0为结尾的标识符才停止，如果手动添加\0，运行结果则为3</p><p><img src="/img/arr2%E9%95%BF%E5%BA%A6.png" alt="arr2长度"></p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转义字符</span></span><br><span class="line"><span class="comment">//在屏幕上打印&quot;c:\test\test.c&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c:\test\test.c&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果</p><p><img src="/img/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A61%E6%89%93%E5%8D%B0%E7%BB%93%E6%9E%9C.png" alt="转义字符1打印结果"></p><p><code>无法打印出“\”，其原因是将“”识别成了转义字符</code></p><p><code>无法打印出“\n”是因为其具有特殊含义，表示换行</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c:\\test\\test.c \n&quot;</span>); <span class="comment">//此处无法打印出\，其原因为在此处进行了转义</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ab\ncd\n&quot;</span>);<span class="comment">//此处\n为转义字符：换行</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,<span class="string">&quot;\&#x27;&quot;</span>);  <span class="comment">//打印一个&#x27;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="转义字符对应表"><a href="#转义字符对应表" class="headerlink" title="转义字符对应表"></a>转义字符对应表</h3><table><thead><tr><th>转义符号</th><th>含义</th></tr></thead><tbody><tr><td>?</td><td>在书写连续多个问号时使用，防止别解析成三字母词</td></tr><tr><td>\ ‘</td><td>表示一个字符 常量’</td></tr><tr><td>\ “</td><td>表示一个字符内部的双引号</td></tr><tr><td>\ \</td><td>表示一个反斜杠，防止被解析成一个转义序列符</td></tr><tr><td>\a</td><td>警告字符</td></tr><tr><td>\b</td><td>退格符</td></tr><tr><td>\f</td><td>进纸符</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\t</td><td>水平制表符</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>\ddd</td><td>ddd表示1~3的八进制数字，如:\130x</td></tr><tr><td>\xdd</td><td>dd表示2个十六进制数字。如：\x30 0</td></tr></tbody></table><p>&#x3D;&#x3D;printf在打印的时候，可以指定打印的格式&#x3D;&#x3D;</p><p>%d表示打印整形</p><p>%c表示打印字符</p><p>%s表示打印字符串</p><hr><h3 id="打印特殊转义字符"><a href="#打印特殊转义字符" class="headerlink" title="打印特殊转义字符"></a>打印特殊转义字符</h3><p>在ASCII中，每一个字符都有相对应的ASCII码值。根据值来确定字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,<span class="string">&#x27;\130&#x27;</span>); <span class="comment">//8进制的130是十进制的88,在ASCII中，X的ASCII码的值就为88</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,<span class="string">&#x27;\101&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/img/ASCII%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="ASCII运行结果"></p><h3 id="ASCII码值表"><a href="#ASCII码值表" class="headerlink" title="ASCII码值表"></a>ASCII码值表</h3><p><a href="https://baike.baidu.com/item/ASCII/309296?fr=aladdin">ASCII码值地址</a></p><table><thead><tr><th>Bin(二进制)</th><th>Oct(八进制)</th><th>Dec(十进制)</th><th>Hex(十六进制)</th><th>缩写&#x2F;字符</th><th>解释</th></tr></thead><tbody><tr><td>0000 0000</td><td>00</td><td>0</td><td>0x00</td><td>NUL(null)</td><td>空字符</td></tr><tr><td>0000 0001</td><td>01</td><td>1</td><td>0x01</td><td>SOH(start of headline)</td><td>标题开始</td></tr><tr><td>0000 0010</td><td>02</td><td>2</td><td>0x02</td><td>STX (start of text)</td><td>正文开始</td></tr><tr><td>0000 0011</td><td>03</td><td>3</td><td>0x03</td><td>ETX (end of text)</td><td>正文结束</td></tr><tr><td>0000 0100</td><td>04</td><td>4</td><td>0x04</td><td>EOT (end of transmission)</td><td>传输结束</td></tr><tr><td>0000 0101</td><td>05</td><td>5</td><td>0x05</td><td>ENQ (enquiry)</td><td>请求</td></tr><tr><td>0000 0110</td><td>06</td><td>6</td><td>0x06</td><td>ACK (acknowledge)</td><td>收到通知</td></tr><tr><td>0000 0111</td><td>07</td><td>7</td><td>0x07</td><td>BEL (bell)</td><td>响铃</td></tr><tr><td>0000 1000</td><td>010</td><td>8</td><td>0x08</td><td>BS (backspace)</td><td>退格</td></tr><tr><td>0000 1001</td><td>011</td><td>9</td><td>0x09</td><td>HT (horizontal tab)</td><td>水平制表符</td></tr><tr><td>0000 1010</td><td>012</td><td>10</td><td>0x0A</td><td>LF (NL line feed, new line)</td><td>换行键</td></tr><tr><td>0000 1011</td><td>013</td><td>11</td><td>0x0B</td><td>VT (vertical tab)</td><td>垂直制表符</td></tr><tr><td>0000 1100</td><td>014</td><td>12</td><td>0x0C</td><td>FF (NP form feed, new page)</td><td>换页键</td></tr><tr><td>0000 1101</td><td>015</td><td>13</td><td>0x0D</td><td>CR (carriage return)</td><td>回车键</td></tr><tr><td>0000 1110</td><td>016</td><td>14</td><td>0x0E</td><td>SO (shift out)</td><td>不用切换</td></tr><tr><td>0000 1111</td><td>017</td><td>15</td><td>0x0F</td><td>SI (shift in)</td><td>启用切换</td></tr><tr><td>0001 0000</td><td>020</td><td>16</td><td>0x10</td><td>DLE (data link escape)</td><td>数据链路转义</td></tr><tr><td>0001 0001</td><td>021</td><td>17</td><td>0x11</td><td>DC1 (device control 1)</td><td>设备控制1</td></tr><tr><td>0001 0010</td><td>022</td><td>18</td><td>0x12</td><td>DC2 (device control 2)</td><td>设备控制2</td></tr><tr><td>0001 0011</td><td>023</td><td>19</td><td>0x13</td><td>DC3 (device control 3)</td><td>设备控制3</td></tr><tr><td>0001 0100</td><td>024</td><td>20</td><td>0x14</td><td>DC4 (device control 4)</td><td>设备控制4</td></tr><tr><td>0001 0101</td><td>025</td><td>21</td><td>0x15</td><td>NAK (negative acknowledge)</td><td>拒绝接收</td></tr><tr><td>0001 0110</td><td>026</td><td>22</td><td>0x16</td><td>SYN (synchronous idle)</td><td>同步空闲</td></tr><tr><td>0001 0111</td><td>027</td><td>23</td><td>0x17</td><td>ETB (end of trans. block)</td><td>结束传输块</td></tr><tr><td>0001 1000</td><td>030</td><td>24</td><td>0x18</td><td>CAN (cancel)</td><td>取消</td></tr><tr><td>0001 1001</td><td>031</td><td>25</td><td>0x19</td><td>EM (end of medium)</td><td>媒介结束</td></tr><tr><td>0001 1010</td><td>032</td><td>26</td><td>0x1A</td><td>SUB (substitute)</td><td>代替</td></tr><tr><td>0001 1011</td><td>033</td><td>27</td><td>0x1B</td><td>ESC (escape)</td><td>换码(溢出)</td></tr><tr><td>0001 1100</td><td>034</td><td>28</td><td>0x1C</td><td>FS (file separator)</td><td>文件分隔符</td></tr><tr><td>0001 1101</td><td>035</td><td>29</td><td>0x1D</td><td>GS (group separator)</td><td>分组符</td></tr><tr><td>0001 1110</td><td>036</td><td>30</td><td>0x1E</td><td>RS (record separator)</td><td>记录分隔符</td></tr><tr><td>0001 1111</td><td>037</td><td>31</td><td>0x1F</td><td>US (unit separator)</td><td>单元分隔符</td></tr><tr><td>0010 0000</td><td>040</td><td>32</td><td>0x20</td><td>(space)</td><td>空格</td></tr><tr><td>0010 0001</td><td>041</td><td>33</td><td>0x21</td><td>!</td><td>叹号</td></tr><tr><td>0010 0010</td><td>042</td><td>34</td><td>0x22</td><td>“</td><td>双引号</td></tr><tr><td>0010 0011</td><td>043</td><td>35</td><td>0x23</td><td>#</td><td>井号</td></tr><tr><td>0010 0100</td><td>044</td><td>36</td><td>0x24</td><td>$</td><td>美元符</td></tr><tr><td>0010 0101</td><td>045</td><td>37</td><td>0x25</td><td>%</td><td>百分号</td></tr><tr><td>0010 0110</td><td>046</td><td>38</td><td>0x26</td><td>&amp;</td><td>和号</td></tr><tr><td>0010 0111</td><td>047</td><td>39</td><td>0x27</td><td>‘</td><td>闭单引号</td></tr><tr><td>0010 1000</td><td>050</td><td>40</td><td>0x28</td><td>(</td><td>开括号</td></tr><tr><td>0010 1001</td><td>051</td><td>41</td><td>0x29</td><td>)</td><td>闭括号</td></tr><tr><td>0010 1010</td><td>052</td><td>42</td><td>0x2A</td><td>*</td><td>星号</td></tr><tr><td>0010 1011</td><td>053</td><td>43</td><td>0x2B</td><td>+</td><td>加号</td></tr><tr><td>0010 1100</td><td>054</td><td>44</td><td>0x2C</td><td>,</td><td>逗号</td></tr><tr><td>0010 1101</td><td>055</td><td>45</td><td>0x2D</td><td>-</td><td>减号&#x2F;破折号</td></tr><tr><td>0010 1110</td><td>056</td><td>46</td><td>0x2E</td><td>.</td><td>句号</td></tr><tr><td>0010 1111</td><td>057</td><td>47</td><td>0x2F</td><td>&#x2F;</td><td>斜杠</td></tr><tr><td>0011 0000</td><td>060</td><td>48</td><td>0x30</td><td>0</td><td>字符0</td></tr><tr><td>0011 0001</td><td>061</td><td>49</td><td>0x31</td><td>1</td><td>字符1</td></tr><tr><td>0011 0010</td><td>062</td><td>50</td><td>0x32</td><td>2</td><td>字符2</td></tr><tr><td>0011 0011</td><td>063</td><td>51</td><td>0x33</td><td>3</td><td>字符3</td></tr><tr><td>0011 0100</td><td>064</td><td>52</td><td>0x34</td><td>4</td><td>字符4</td></tr><tr><td>0011 0101</td><td>065</td><td>53</td><td>0x35</td><td>5</td><td>字符5</td></tr><tr><td>0011 0110</td><td>066</td><td>54</td><td>0x36</td><td>6</td><td>字符6</td></tr><tr><td>0011 0111</td><td>067</td><td>55</td><td>0x37</td><td>7</td><td>字符7</td></tr><tr><td>0011 1000</td><td>070</td><td>56</td><td>0x38</td><td>8</td><td>字符8</td></tr><tr><td>0011 1001</td><td>071</td><td>57</td><td>0x39</td><td>9</td><td>字符9</td></tr><tr><td>0011 1010</td><td>072</td><td>58</td><td>0x3A</td><td>:</td><td>冒号</td></tr><tr><td>0011 1011</td><td>073</td><td>59</td><td>0x3B</td><td>;</td><td>分号</td></tr><tr><td>0011 1100</td><td>074</td><td>60</td><td>0x3C</td><td>&lt;</td><td>小于</td></tr><tr><td>0011 1101</td><td>075</td><td>61</td><td>0x3D</td><td>&#x3D;</td><td>等号</td></tr><tr><td>0011 1110</td><td>076</td><td>62</td><td>0x3E</td><td>&gt;</td><td>大于</td></tr><tr><td>0011 1111</td><td>077</td><td>63</td><td>0x3F</td><td>?</td><td>问号</td></tr><tr><td>0100 0000</td><td>0100</td><td>64</td><td>0x40</td><td>@</td><td>电子邮件符号</td></tr><tr><td>0100 0001</td><td>0101</td><td>65</td><td>0x41</td><td>A</td><td>大写字母A</td></tr><tr><td>0100 0010</td><td>0102</td><td>66</td><td>0x42</td><td>B</td><td>大写字母B</td></tr><tr><td>0100 0011</td><td>0103</td><td>67</td><td>0x43</td><td>C</td><td>大写字母C</td></tr><tr><td>0100 0100</td><td>0104</td><td>68</td><td>0x44</td><td>D</td><td>大写字母D</td></tr><tr><td>0100 0101</td><td>0105</td><td>69</td><td>0x45</td><td>E</td><td>大写字母E</td></tr><tr><td>0100 0110</td><td>0106</td><td>70</td><td>0x46</td><td>F</td><td>大写字母F</td></tr><tr><td>0100 0111</td><td>0107</td><td>71</td><td>0x47</td><td>G</td><td>大写字母G</td></tr><tr><td>0100 1000</td><td>0110</td><td>72</td><td>0x48</td><td>H</td><td>大写字母H</td></tr><tr><td>0100 1001</td><td>0111</td><td>73</td><td>0x49</td><td>I</td><td>大写字母I</td></tr><tr><td>01001010</td><td>0112</td><td>74</td><td>0x4A</td><td>J</td><td>大写字母J</td></tr><tr><td>0100 1011</td><td>0113</td><td>75</td><td>0x4B</td><td>K</td><td>大写字母K</td></tr><tr><td>0100 1100</td><td>0114</td><td>76</td><td>0x4C</td><td>L</td><td>大写字母L</td></tr><tr><td>0100 1101</td><td>0115</td><td>77</td><td>0x4D</td><td>M</td><td>大写字母M</td></tr><tr><td>0100 1110</td><td>0116</td><td>78</td><td>0x4E</td><td>N</td><td>大写字母N</td></tr><tr><td>0100 1111</td><td>0117</td><td>79</td><td>0x4F</td><td>O</td><td>大写字母O</td></tr><tr><td>0101 0000</td><td>0120</td><td>80</td><td>0x50</td><td>P</td><td>大写字母P</td></tr><tr><td>0101 0001</td><td>0121</td><td>81</td><td>0x51</td><td>Q</td><td>大写字母Q</td></tr><tr><td>0101 0010</td><td>0122</td><td>82</td><td>0x52</td><td>R</td><td>大写字母R</td></tr><tr><td>0101 0011</td><td>0123</td><td>83</td><td>0x53</td><td>S</td><td>大写字母S</td></tr><tr><td>0101 0100</td><td>0124</td><td>84</td><td>0x54</td><td>T</td><td>大写字母T</td></tr><tr><td>0101 0101</td><td>0125</td><td>85</td><td>0x55</td><td>U</td><td>大写字母U</td></tr><tr><td>0101 0110</td><td>0126</td><td>86</td><td>0x56</td><td>V</td><td>大写字母V</td></tr><tr><td>0101 0111</td><td>0127</td><td>87</td><td>0x57</td><td>W</td><td>大写字母W</td></tr><tr><td>0101 1000</td><td>0130</td><td>88</td><td>0x58</td><td>X</td><td>大写字母X</td></tr><tr><td>0101 1001</td><td>0131</td><td>89</td><td>0x59</td><td>Y</td><td>大写字母Y</td></tr><tr><td>0101 1010</td><td>0132</td><td>90</td><td>0x5A</td><td>Z</td><td>大写字母Z</td></tr><tr><td>0101 1011</td><td>0133</td><td>91</td><td>0x5B</td><td>[</td><td>开方括号</td></tr><tr><td>0101 1100</td><td>0134</td><td>92</td><td>0x5C</td><td>\</td><td>反斜杠</td></tr><tr><td>0101 1101</td><td>0135</td><td>93</td><td>0x5D</td><td>]</td><td>闭方括号</td></tr><tr><td>0101 1110</td><td>0136</td><td>94</td><td>0x5E</td><td>^</td><td>脱字符</td></tr><tr><td>0101 1111</td><td>0137</td><td>95</td><td>0x5F</td><td>_</td><td>下划线</td></tr><tr><td>0110 0000</td><td>0140</td><td>96</td><td>0x60</td><td>&#96;</td><td>开单引号</td></tr><tr><td>0110 0001</td><td>0141</td><td>97</td><td>0x61</td><td>a</td><td>小写字母a</td></tr><tr><td>0110 0010</td><td>0142</td><td>98</td><td>0x62</td><td>b</td><td>小写字母b</td></tr><tr><td>0110 0011</td><td>0143</td><td>99</td><td>0x63</td><td>c</td><td>小写字母c</td></tr><tr><td>0110 0100</td><td>0144</td><td>100</td><td>0x64</td><td>d</td><td>小写字母d</td></tr><tr><td>0110 0101</td><td>0145</td><td>101</td><td>0x65</td><td>e</td><td>小写字母e</td></tr><tr><td>0110 0110</td><td>0146</td><td>102</td><td>0x66</td><td>f</td><td>小写字母f</td></tr><tr><td>0110 0111</td><td>0147</td><td>103</td><td>0x67</td><td>g</td><td>小写字母g</td></tr><tr><td>0110 1000</td><td>0150</td><td>104</td><td>0x68</td><td>h</td><td>小写字母h</td></tr><tr><td>0110 1001</td><td>0151</td><td>105</td><td>0x69</td><td>i</td><td>小写字母i</td></tr><tr><td>0110 1010</td><td>0152</td><td>106</td><td>0x6A</td><td>j</td><td>小写字母j</td></tr><tr><td>0110 1011</td><td>0153</td><td>107</td><td>0x6B</td><td>k</td><td>小写字母k</td></tr><tr><td>0110 1100</td><td>0154</td><td>108</td><td>0x6C</td><td>l</td><td>小写字母l</td></tr><tr><td>0110 1101</td><td>0155</td><td>109</td><td>0x6D</td><td>m</td><td>小写字母m</td></tr><tr><td>0110 1110</td><td>0156</td><td>110</td><td>0x6E</td><td>n</td><td>小写字母n</td></tr><tr><td>0110 1111</td><td>0157</td><td>111</td><td>0x6F</td><td>o</td><td>小写字母o</td></tr><tr><td>0111 0000</td><td>0160</td><td>112</td><td>0x70</td><td>p</td><td>小写字母p</td></tr><tr><td>0111 0001</td><td>0161</td><td>113</td><td>0x71</td><td>q</td><td>小写字母q</td></tr><tr><td>0111 0010</td><td>0162</td><td>114</td><td>0x72</td><td>r</td><td>小写字母r</td></tr><tr><td>0111 0011</td><td>0163</td><td>115</td><td>0x73</td><td>s</td><td>小写字母s</td></tr><tr><td>0111 0100</td><td>0164</td><td>116</td><td>0x74</td><td>t</td><td>小写字母t</td></tr><tr><td>0111 0101</td><td>0165</td><td>117</td><td>0x75</td><td>u</td><td>小写字母u</td></tr><tr><td>0111 0110</td><td>0166</td><td>118</td><td>0x76</td><td>v</td><td>小写字母v</td></tr><tr><td>0111 0111</td><td>0167</td><td>119</td><td>0x77</td><td>w</td><td>小写字母w</td></tr><tr><td>0111 1000</td><td>0170</td><td>120</td><td>0x78</td><td>x</td><td>小写字母x</td></tr><tr><td>0111 1001</td><td>0171</td><td>121</td><td>0x79</td><td>y</td><td>小写字母y</td></tr><tr><td>0111 1010</td><td>0172</td><td>122</td><td>0x7A</td><td>z</td><td>小写字母z</td></tr><tr><td>0111 1011</td><td>0173</td><td>123</td><td>0x7B</td><td>{</td><td>开花括号</td></tr><tr><td>0111 1100</td><td>0174</td><td>124</td><td>0x7C</td><td>|</td><td>垂线</td></tr><tr><td>0111 1101</td><td>0175</td><td>125</td><td>0x7D</td><td>}</td><td>闭花括号</td></tr><tr><td>0111 1110</td><td>0176</td><td>126</td><td>0x7E</td><td>~</td><td>波浪号</td></tr><tr><td>0111 1111</td><td>0177</td><td>127</td><td>0x7F</td><td>DEL (delete)</td><td>删除</td></tr></tbody></table><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>求 ：printf(“%d\n”,strlen(“c:\test\328\test.c “));   的长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算长度</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(<span class="string">&quot;c:\test\328\test.c&quot;</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>长度为14</code>，具体解释为：”c”,”:”,”\t”,”e”,”s”,”t”,”\32”,”\8”,”\t”,”e”,”s”,”t”,”.”,”c”</p><p>&#x3D;&#x3D;\32为一个八进制数字，八进制数字不包含8，所以\32为一个字符，8为另外一个字符&#x3D;&#x3D;</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>含义：用来解释复杂代码</p><p>注释方式</p><p>&#x2F;&#x2F; —-当行注释，注释&#x2F;&#x2F;所在行后的内容      —-c++的注释风格</p><p>&#x2F;*   * &#x2F;   c语言的注释风格，可以注释一整段代码，不支持嵌套注释，即不能在&#x2F;*   *&#x2F;中在加入该注释</p>]]></content>
      
      
      <categories>
          
          <category> c-learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 c-learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言-C语言基础，数据类型，变量与常量，作用域与生命周期</title>
      <link href="/2023/03/11/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%EF%BC%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%B8%B8%E9%87%8F%E4%B8%8E%E5%8F%98%E9%87%8F/"/>
      <url>/2023/03/11/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%EF%BC%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%B8%B8%E9%87%8F%E4%B8%8E%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://gitee.com/sweetheart-dyf/">Gitee主页</a><br><a href="https://github.com/sweetheart-dyf/">Github主页</a><br><a href="https://blog.csdn.net/weixin_54892866/">CSDN地址</a></p></blockquote><h2 id="关于工程"><a href="#关于工程" class="headerlink" title="关于工程"></a>关于工程</h2><ul><li>一个工程只能有一个main函数</li><li>一个工程可以有多个.c文件</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="1：一个简单的内容输出"><a href="#1：一个简单的内容输出" class="headerlink" title="1：一个简单的内容输出"></a>1：一个简单的内容输出</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  <span class="comment">//引入头文件，编译预处理命令</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>   <span class="comment">//定义主函数</span></span><br><span class="line">&#123;            <span class="comment">//函数开始的标志</span></span><br><span class="line">    <span class="comment">//printf为输出函数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello word\n&quot;</span>);  <span class="comment">//输出的信息，/n为换行符                 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;    <span class="comment">//函数执行完成返回函数值0</span></span><br><span class="line">getchar(); <span class="comment">//暂停到代码运行界面</span></span><br><span class="line">&#125;            </span><br></pre></td></tr></table></figure><p>运行结果：<img src="/../img/%E7%AC%AC%E4%B8%80%E4%B8%AAC%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%BE%93%E5%87%BA.png" alt="第一个C语言程序的输出"></p><h3 id="2：数据类型"><a href="#2：数据类型" class="headerlink" title="2：数据类型"></a>2：数据类型</h3><h4 id="1）数据类型解释"><a href="#1）数据类型解释" class="headerlink" title="1）数据类型解释"></a>1）数据类型解释</h4><table><thead><tr><th>类型</th><th>解释</th><th>所占大小</th><th>案例</th></tr></thead><tbody><tr><td>char</td><td>字符数据类型</td><td>1</td><td>char ch&#x3D;’a’;</td></tr><tr><td>short</td><td>短整型</td><td>2</td><td>short num&#x3D;10;</td></tr><tr><td>int</td><td>整型</td><td>4</td><td>int age &#x3D; 20;</td></tr><tr><td>long</td><td>长整型</td><td>4</td><td></td></tr><tr><td>long long</td><td>更长的整型</td><td>8</td><td></td></tr><tr><td>float</td><td>单精度浮点数</td><td>4</td><td>float weight &#x3D; 50.5;</td></tr><tr><td>double</td><td>精度浮点数</td><td>8</td><td>double d &#x3D;0.0;</td></tr></tbody></table><p>&#x3D;&#x3D;printf(“%d\n”,100);  &#x2F;&#x2F;打印一个整数—%d&#x3D;&#x3D;<br>&#x3D;&#x3D;sizefo–操作符–用来计算类型或者变量所占空间的大小，单位为字节&#x3D;&#x3D;</p><p><code>c语言标准：sizeof(long)&gt;=sizeof(int)</code></p><p>出现数据类型的原因？—–提高空间的利用率</p><p><strong>求数据类型的大小</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;,100);  //打印一个整数---%d</span></span><br><span class="line"><span class="comment">//sizefo--操作符--用来计算类型或者变量所占空间的大小，单位为字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">short</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">float</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">double</span>));  <span class="comment">//查看数据类型所占的大小</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）计算机中的单位"><a href="#2）计算机中的单位" class="headerlink" title="2）计算机中的单位"></a>2）计算机中的单位</h4><ul><li><p>最小的为bit（比特位）</p></li><li><p>byte–字节&#x3D;8bit</p></li><li><p>kb&#x3D;1024byte</p></li><li><p>mb&#x3D;1024kb</p></li><li><p>gb&#x3D;1024mb</p></li></ul><h3 id="3：初识常量与变量"><a href="#3：初识常量与变量" class="headerlink" title="3：初识常量与变量"></a>3：初识常量与变量</h3><h4 id="1）描述"><a href="#1）描述" class="headerlink" title="1）描述"></a>1）描述</h4><ul><li>变量—能够被改变的量</li><li>常量—不能够被改变的量</li></ul><h4 id="2）变量"><a href="#2）变量" class="headerlink" title="2）变量"></a>2）变量</h4><h4 id="（1）局部变量"><a href="#（1）局部变量" class="headerlink" title="（1）局部变量"></a>（1）局部变量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> age = <span class="number">20</span>;   <span class="comment">//创建一个变量；类型  变量的名字 = 数值</span></span><br><span class="line"><span class="type">double</span> weight = <span class="number">60.5</span>; <span class="comment">//创建一个体重的变量</span></span><br><span class="line"></span><br><span class="line">age=age+<span class="number">1</span>;  <span class="comment">//年龄+1</span></span><br><span class="line">weight=weight<span class="number">-5</span>; <span class="comment">//体重-5</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>,weight);  <span class="comment">//double打印使用%lf打印</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）全局变量"><a href="#（2）全局变量" class="headerlink" title="（2）全局变量"></a>（2）全局变量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">a = <span class="number">20</span>;  <span class="comment">//全局变量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>   <span class="comment">//局部变量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//局部变量优先于全局变量</span></span><br></pre></td></tr></table></figure><p><strong>局部变量与全局变量</strong><br><strong>{}内部为局部变量</strong><br><strong>{}外部为全局变量</strong><br><strong>当局部变量与全局与全局变量冲突的情况下，局部优先</strong></p><h4 id="（3）计算两个数的和"><a href="#（3）计算两个数的和" class="headerlink" title="（3）计算两个数的和"></a>（3）计算两个数的和</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//scanf函数为输入函数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入两个数字，之间用空格隔开:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">sum=a+b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<img src="/img/%E6%B1%82%E4%B8%A4%E4%B8%AA%E6%95%B4%E6%95%B0%E7%9A%84%E5%92%8C.png" alt="求两个整数的和"></p><h4 id="（4）变量的作用域与生命周期"><a href="#（4）变量的作用域与生命周期" class="headerlink" title="（4）变量的作用域与生命周期"></a>（4）变量的作用域与生命周期</h4><h5 id="a：作用域"><a href="#a：作用域" class="headerlink" title="a：作用域"></a>a：作用域</h5><p><code>局部变量的作用域：就是变量所在的局部范围</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//作用域与生命周期</span></span><br><span class="line"><span class="comment">//作用域：即变量在哪里可以使用，就是变量的作用域</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d\n&quot;</span>,a);  <span class="comment">//只能在&#123;&#125;此区域内使用---局部变量的作用域：就是变量所在的局部范围</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>全局变量的作用域：整个工程</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> g_val=<span class="number">2022</span>;<span class="comment">//全局变量的作用域：整个工程</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//作用域与生命周期</span></span><br><span class="line"><span class="comment">//作用域：即变量在哪里可以使用，就是变量的作用域</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第一次打印全局变量:%d\n&quot;</span>,g_val);</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d\n&quot;</span>,a);  <span class="comment">//只能在&#123;&#125;此区域内使用---局部变量的作用域：就是变量所在的局部范围</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第二次打印全局变量:%d\n&quot;</span>,g_val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第三次打印全局变量:%d\n&quot;</span>,g_val);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>全局变量跨文件使用的声明</strong><br><strong>主函数前面声明：extern int 变量名</strong>&#x3D;&#x3D;</p><h5 id="b：生命周期"><a href="#b：生命周期" class="headerlink" title="b：生命周期"></a>b：生命周期</h5><p><code>局部变量的生命周期：进入局部范围生命开始，出范围生命结束</code></p><p><code>全局变量的生命周期，程序的生命周期</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变量的生命周期</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> b=<span class="number">20</span>; <span class="comment">//全局变量的生命周期，程序的生命周期</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第一次打印全局变量:%d\n&quot;</span>,b);</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a =<span class="number">10</span>;  <span class="comment">//局部变量的生命周期：进入局部范围生命开始，出范围生命结束</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第二次打印全局变量:%d\n&quot;</span>,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第三次打印全局变量:%d\n&quot;</span>,b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/img/%E5%8F%98%E9%87%8F%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="变量的生命周期"></p><h4 id="3）常量"><a href="#3）常量" class="headerlink" title="3）常量"></a>3）常量</h4><h4 id="（1）常量的分类"><a href="#（1）常量的分类" class="headerlink" title="（1）常量的分类"></a>（1）常量的分类</h4><h5 id="a：字面常量"><a href="#a：字面常量" class="headerlink" title="a：字面常量"></a>a：字面常量</h5><p>例如：3.14，2，a，abc</p><h5 id="b：const修饰的常变量"><a href="#b：const修饰的常变量" class="headerlink" title="b：const修饰的常变量"></a>b：const修饰的常变量</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> num =<span class="number">10</span>;  <span class="comment">//添加了const后，num就是常变量---就具常属性（不能被改变的属性）</span></span><br><span class="line">num=<span class="number">20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num=%d\n&quot;</span>,num);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行会出现报错，其原因时const修饰的常变量不能被改变</span></span><br></pre></td></tr></table></figure><p><img src="/img/const%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%B8%B8%E5%8F%98%E9%87%8F.png" alt="const修饰的常变量"></p><h5 id="c：-define定义的标识符常量"><a href="#c：-define定义的标识符常量" class="headerlink" title="c：#define定义的标识符常量"></a>c：#define定义的标识符常量</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 10000</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//MAX=2000 //此写法为错误。#define定义的常量无法再次修改</span></span><br><span class="line"><span class="type">int</span> n=MAX;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;n=%d\n&quot;</span>,n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="d：枚举常量"><a href="#d：枚举常量" class="headerlink" title="d：枚举常量"></a>d：枚举常量</h5><p>定义：可以一一列举的常量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个性别的枚举常量</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> //定义一个性别的枚举常量</span></span><br><span class="line"><span class="class">&#123;</span>   <span class="comment">//这种枚举实例的变量未来可能取值</span></span><br><span class="line">MALE=<span class="number">3</span>,  <span class="comment">//枚举常量,默认从0开始。赋初值为3</span></span><br><span class="line">FEMALE,</span><br><span class="line">SECRET</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> <span class="title">s</span> =</span>MALE;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,MALE);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,FEMALE);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,SECRET);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%9E%9A%E4%B8%BE%E5%B8%B8%E9%87%8F.png" alt="枚举常量"></p>]]></content>
      
      
      <categories>
          
          <category> c-learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 c-learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos-路由转发</title>
      <link href="/2022/09/26/%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/"/>
      <url>/2022/09/26/%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="1：什么是路由转发？"><a href="#1：什么是路由转发？" class="headerlink" title="1：什么是路由转发？"></a>1：什么是路由转发？</h2><p>路由器把IP数据包的目的IP地址路由表对比，找到匹配的路由表项之后，根据这个路由表项的指示将数据包转发给下一个网络设备或PC</p><h2 id="2：查看路由信息"><a href="#2：查看路由信息" class="headerlink" title="2：查看路由信息"></a>2：查看路由信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# route -n  #查看路由信息</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">192.168.122.0   0.0.0.0         255.255.255.0   U     0      0        0 virbr0</span><br><span class="line">192.168.196.0   0.0.0.0         255.255.255.0   U     425    0        0 br0</span><br><span class="line"></span><br><span class="line">[root@Centos-A1 ~]# ip route   #查看路由的对应关系</span><br><span class="line">192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1 </span><br><span class="line">192.168.196.0/24 dev br0 proto kernel scope link src 192.168.196.200 metric 425</span><br></pre></td></tr></table></figure><h2 id="3：路由表的添加与删除"><a href="#3：路由表的添加与删除" class="headerlink" title="3：路由表的添加与删除"></a>3：路由表的添加与删除</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# ip route  #查看路由表 </span><br><span class="line">192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1 </span><br><span class="line">[root@Centos-A1 ~]# ip route add 172.25.254.110 via 192.168.196.2  #添加路由，ip route add ip地址[/掩码] via 网关</span><br><span class="line">[root@Centos-A1 ~]# ip route del 172.25.254.110 #删除路由</span><br></pre></td></tr></table></figure><h2 id="4：路由转发的管理与配置"><a href="#4：路由转发的管理与配置" class="headerlink" title="4：路由转发的管理与配置"></a>4：路由转发的管理与配置</h2><p>路由转发使用firewalld（防火墙）来实现管理与配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# systemctl status firewalld.service  #查看防火墙状态</span><br><span class="line">[root@Centos-A1 ~]# firewall-cmd --list-all  #查看防护墙信息</span><br><span class="line">public (active) #[默认使用的区域]</span><br><span class="line">  target: default  #对于区域所采用的默认策略（Accept（允许）、reject（拒绝）、 drop（完全拒绝））</span><br><span class="line">  icmp-block-inversion: no ：#ICMP黑白名单开关</span><br><span class="line">  interfaces: br0 ens33  ##关联的网卡</span><br><span class="line">  sources:   #来源，可以是ip，也可以是mac地址</span><br><span class="line">  services: dhcpv6-client ssh  #允许的服务</span><br><span class="line">  ports:    #允许的端口</span><br><span class="line">  protocols:   #允许通过的协议</span><br><span class="line">  masquerade: no   #ip地址伪装，将接受到的源地址转发请求网卡的地址（路由器）</span><br><span class="line">  forward-ports:    #端口转发</span><br><span class="line">  source-ports:    #允许的来源端口</span><br><span class="line">  icmp-blocks:    #可以添加的CMP类型</span><br><span class="line">  rich rules:   #富规则集，优先级在所有防火墙中最高</span><br></pre></td></tr></table></figure><p>防火墙操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# systemctl stop firewalld.service  #关闭防火墙</span><br><span class="line">[root@Centos-A1 ~]# systemctl restart firewalld.service #重启防火墙</span><br><span class="line">[root@Centos-A1 ~]# systemctl start firewalld.service  #开启防火墙</span><br></pre></td></tr></table></figure><h3 id="1）配置路由端口转发"><a href="#1）配置路由端口转发" class="headerlink" title="1）配置路由端口转发"></a>1）配置路由端口转发</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# firewall-cmd --permanent --add-forward-port=port=888:proto=tcp:toport=80 #将访问本机888端口的流量转到80端口</span><br><span class="line">success</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">此处安装httpd服务器进行测试</span></span><br><span class="line">root@Centos-A1 ~]# yum install httpd -y  #安装httpd服务</span><br><span class="line">[root@Centos-A1 ~]# firewall-cmd --add-service=http  #放行http服务</span><br><span class="line">[root@Centos-A1 ~]# firewall-cmd --add-port=888/tcp  #方向转换端口888</span><br><span class="line">[root@Centos-A1 ~]# echo hello centos7 &gt; /var/www/html/index.html  #给http网站写入内容</span><br><span class="line">[root@Centos-A1 ~]# systemctl restart httpd  #重新启动http服务</span><br><span class="line">[root@Centos-A1 ~]# semanage port -l| grep http #查看http服务使用的selinux标签  //如果能够访问则不需要更改</span><br><span class="line">[root@Centos-A1 ~]# semanage port -a -t http_port_t -p tcp 888  #给888端口打上http服务标签</span><br><span class="line">使用物理机访问 http://192.168.196.137:888,即http://虚拟机ip地址:转换端口，能够访问，说明端口转发成功</span><br></pre></td></tr></table></figure><p><img src="/img/image-20220907211100065.png" alt="image-20220907211100065"></p><p>实验中为了简单，可以关闭selinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# setenforce 0 #临时关闭selinux</span><br><span class="line">[root@Centos-A1 ~]# vim /etc/selinux/config   #永久关闭</span><br><span class="line">SELINUX=enforcing</span><br><span class="line">将enforcing修改为disabled</span><br></pre></td></tr></table></figure><h3 id="2）配置路由ip转发"><a href="#2）配置路由ip转发" class="headerlink" title="2）配置路由ip转发"></a>2）配置路由ip转发</h3><p>首先，Centos-A1也需要开启防护墙的地址伪装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# firewall-cmd --add-masquerade --permanent   #开启地址伪装，--permanent表示永久生效，不添加重启后配置失效</span><br><span class="line">success</span><br><span class="line">[root@Centos-A1 ~]# firewall-cmd --reload  #重新载入防火墙配置</span><br><span class="line">success</span><br></pre></td></tr></table></figure><p>如果是接着上面端口转发后做的，先删除之前的端口转发，避免冲突</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# firewall-cmd --remove-forward-port=port=888:proto=tcp:toport=80</span><br><span class="line">success</span><br></pre></td></tr></table></figure><p>打开另一台服务器Cenos -A2，安装httpd服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@centos-a2 ~]# yum install httpd -y</span><br><span class="line">[root@centos-a2 ~]# firewall-cmd --permanent --add-service=http</span><br><span class="line">success</span><br><span class="line">[root@centos-a2 ~]# echo  hello Centos-A2 &gt; /var/www/html/index.html</span><br><span class="line">[root@centos-a2 ~]# systemctl restart httpd</span><br><span class="line">[root@centos-a2 ~]# firewall-cmd --permanent --add-service=http  #防火墙放行httpd服务</span><br><span class="line">[root@centos-a2 ~]# firewall-cmd --reload  #重新载入服务</span><br><span class="line">success</span><br><span class="line">[root@centos-a2 ~]# firewall-cmd --list-all </span><br><span class="line">services: ssh dhcpv6-client http #已经放行http服务</span><br></pre></td></tr></table></figure><p>在Centos-A1上配置包转发，将访问Centos-A1的数据转到Centos-A2上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# sysctl -w net.ipv4.ip_forward=1  #开启地包转发功能，1表示开启，0表示未开启</span><br><span class="line">net.ipv4.ip_forward = 1  </span><br><span class="line">[root@Centos-A1 ~]#  firewall-cmd --permanent --add-forward-port=port=80:proto=tcp:toport=80:toaddr=192.168.196.131  #将访问本机80端口的流量转发到192.168.196.131的80端口</span><br></pre></td></tr></table></figure><p>本机访问测试，192.168.196.137为Centos-A1的ip地址</p><p><img src="/img/image-20220908092458224.png"></p><p>富规则实现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">首先也需要开启地址伪装与地址转发</span><br><span class="line">[root@Centos-A1 ~]# firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.196.0/24&quot; forward-port port=80 protocol=tcp to-port=80 to-addr=192.168.196.131&quot;  #配置富规则，将192.168.192.0/24网段的主机访问本机80端口的流量转到192.168.196.131的80端口的流量</span><br></pre></td></tr></table></figure><p>访问测试，即可看到转发成功</p><p><img src="/img/image-20220908093613740.png" alt="image-20220908093613740"></p><h2 id="5：拓展"><a href="#5：拓展" class="headerlink" title="5：拓展"></a>5：拓展</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos-a2 ~]# man firewall-cmd  #查看防火墙的使用帮助</span><br><span class="line">/-add-forward       #即可查看到配置端口转发的示例</span><br><span class="line">[root@centos-a2 ~]# man firewalld.richlanguage  #查看防火墙富规则配置</span><br><span class="line">/Forward-Port   #搜索即可查看防火墙富贵则配置地址转发的案例</span><br></pre></td></tr></table></figure><p>关于yum源的配置</p><h3 id="1）本地镜像配置"><a href="#1）本地镜像配置" class="headerlink" title="1）本地镜像配置"></a>1）本地镜像配置</h3><p>首先连接镜像</p><p><img src="/img/image-20220908101842008.png" alt="image-20220908101842008"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@centos-a2 yum.repos.d]# mount /dev/cdrom /mnt/  #挂载镜像</span><br><span class="line">[root@centos-a2 yum.repos.d]# df -Th| grep mnt  #查看挂载</span><br><span class="line">/dev/sr0                iso9660   4.5G  4.5G     0  100%  /mnt</span><br><span class="line">[root@centos-a2 yum.repos.d]# cp -p CentOS-Base.repo CentOS-Base.repo.BAK  #修改配置前备份</span><br><span class="line">[root@centos-a2 yum.repos.d]# vim CentOS-Base.repo #修改镜像源为本地</span><br><span class="line">[base]</span><br><span class="line">name=centos_base</span><br><span class="line">baseurl=file:///mnt</span><br><span class="line">gpgcheck=0 #不做校验，为1表示做校验，此时需要添加一行：gpgkey=密钥路径</span><br><span class="line">[root@centos-a2 yum.repos.d]# yum clean all #清除缓存</span><br><span class="line">[root@centos-a2 yum.repos.d]# yum repolis  #重新生成缓</span><br></pre></td></tr></table></figure><p>对于本地镜像源，存在epel扩展源的情况下，repolist缓存1万多为正常，且其他源都有缓存</p><p><img src="/img/image-20220908102222454.png" alt="image-20220908102222454"></p><h3 id="2）网络镜像源配置阿里云"><a href="#2）网络镜像源配置阿里云" class="headerlink" title="2）网络镜像源配置阿里云"></a>2）网络镜像源配置<a href="https://developer.aliyun.com/mirror">阿里云</a></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo #下载镜像源到服务器</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo  #两种方式选择一个即可，都是下载镜像源到本地</span><br><span class="line">[root@centos-a2 yum.repos.d]# yum clean all  #清除缓存</span><br><span class="line">[root@centos-a2 yum.repos.d]# yum repolis  #重新生成缓存</span><br></pre></td></tr></table></figure><p>在有epel扩展源的情况下，repolist的值大于2万为正常，其中每个源都有缓存</p><p><img src="/img/image-20220908101715977.png" alt="image-20220908101715977"></p><h3 id="3）其他"><a href="#3）其他" class="headerlink" title="3）其他"></a>3）其他</h3><p>centos 8需要配置两个镜像源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@centos-a2 yum.repos.d]# cp -p CentOS-Base.repo CentOS-Base.repo.BAK  #修改配置前备份</span><br><span class="line">[root@centos-a2 yum.repos.d]# vim CentOS-Base.repo #修改镜像源为本地</span><br><span class="line">[BaseOS]</span><br><span class="line">name=BaseOS</span><br><span class="line">baseurl=本地路径或者网络镜像仓库/BaseOS</span><br><span class="line">gpgcheck=0 #不做校验，为1表示做校验，此时需要添加一行：gpgkey=密钥路径</span><br><span class="line">enabled=1 # 开启仓库</span><br><span class="line">[AppStream]</span><br><span class="line">name=AppStream</span><br><span class="line">baseurl=本地路径或者网络镜像仓库/AppStream</span><br><span class="line">gpgcheck=0 #不做校验,为1表示做校验，此时需要添加一行：gpgkey=密钥路径</span><br><span class="line">enabled=1 # 开启仓库</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos-网络配置与双网卡绑定</title>
      <link href="/2022/09/08/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/09/08/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="1：什么是ip？"><a href="#1：什么是ip？" class="headerlink" title="1：什么是ip？"></a>1：什么是ip？</h2><p>ip是用来给主机的编号，访问到这个主机的凭据</p><p>ip地址在<code>同一个网路里面都是唯一的存在</code>，如果不唯一，就会发生ip冲突，造成网络无法访问</p><p>ip地址由网络部分和主机部分提供，掩码来决定整个网络的大小</p><p>255.255.255.0 24为掩码</p><p>掩码用来表示子网可以容纳多少主机</p><p><strong>网关：子网对外访问的出入口</strong></p><p>DNS：名称服务器，将域名解析成ip</p><p>centos 7解析文件存放位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# cat /etc/resolv.conf </span><br></pre></td></tr></table></figure><h2 id="2：网络设备"><a href="#2：网络设备" class="headerlink" title="2：网络设备"></a>2：网络设备</h2><p>虚拟网络设备</p><p>物理网络设备</p><ul><li><p>RHEL 7存在三张网卡</p><ul><li><p>ens33（名称不唯一） 是真实的物理网卡</p></li><li><p>lo，本地环回接口，ip地址永远唯一，且为127.0.0.1，通常给本地应用程序调用</p></li><li><p>virbr0，kvm虚拟化的虚拟网卡，一般不用配置</p></li></ul></li></ul><h2 id="3：网络接口的命名"><a href="#3：网络接口的命名" class="headerlink" title="3：网络接口的命名"></a>3：网络接口的命名</h2><ul><li>传统上，Linux的网络接口依次为eth0，eth1，eth2……</li><li>RHEL 7以上的版本的默认命名是基于固件的基本上分配的固定名称，使用的是udev规则，内核识别的网卡依旧为eth 0，如ens33<ul><li>接口类型<ul><li>以太网有线接口为en</li><li>无线局域网接口为wl</li><li>无线广域网接口为ww</li></ul></li><li>适配器类型<ul><li>s为热插拔插槽</li><li>o为板载</li><li>p代表对pcl类型的支持</li></ul></li><li>数字N代表索引，ID或者端口</li></ul></li><li>如果固定的密码名称不能确定，传统的名称如ethn将被使用</li></ul><p>在有些特殊场景下，需要将服务器的网卡统一，便于管理，因此需要还原ens网卡命名规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@Centos-A1 ~]<span class="comment"># cp -p /etc/default/grub /etc/default/grub.bak   #更改文件之前备份</span></span><br><span class="line">[root@locathost ~]<span class="comment">#vim /etc/default/grub </span></span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">&quot;crashkernel=auto rhgb quiet (net.ifnames=0)&quot;</span></span><br><span class="line"> //(里面为添加的参数)</span><br><span class="line">[root@locathost ~]<span class="comment"># grub2-mkconfig -o /etc/grub2.cfg # 内核重新读取配置文件</span></span><br><span class="line">[root@locathost ~]<span class="comment"># reboot</span></span><br><span class="line">重启后ifconfig查看网卡，即可看到网卡变成eth0</span><br></pre></td></tr></table></figure><p><img src="/img/image-20220907170518317-16625415248702.png" alt="image-20220907170518317"></p><p>然后重启即可</p><h2 id="4：vm虚拟机三种网络类型简介"><a href="#4：vm虚拟机三种网络类型简介" class="headerlink" title="4：vm虚拟机三种网络类型简介"></a>4：vm虚拟机三种网络类型简介</h2><h3 id="a-仅主机模式（VMnet1）"><a href="#a-仅主机模式（VMnet1）" class="headerlink" title="a.仅主机模式（VMnet1）"></a>a.仅主机模式（VMnet1）</h3><p>虚拟机之间可以互相通信，但是不能访问外网（虚拟机没有上行链路）Vmnet1，保证和主机之间的通信</p><h3 id="b-NAT（VMnet8）"><a href="#b-NAT（VMnet8）" class="headerlink" title="b.NAT（VMnet8）"></a>b.NAT（VMnet8）</h3><p>网络地址转换，将虚拟交换机内部的虚拟机地址转换成可以访问外部网络的地址进行网络访问</p><p>其中虚拟机内部网络也存在一个网段</p><p>NAT模式下，会有地址会被分配作为网关地址。</p><p>优势：节约资源，保护内网设备</p><p>如果配置的ip地址不为虚拟机本身内部网络，则需要在虚拟网络编辑器处修改子网范围与网关</p><h3 id="c-桥接模式（物理网卡）"><a href="#c-桥接模式（物理网卡）" class="headerlink" title="c.桥接模式（物理网卡）"></a>c.桥接模式（物理网卡）</h3><p>虚拟机直连外部网络，供外部网络访问</p><h2 id="5：网络信息的查看"><a href="#5：网络信息的查看" class="headerlink" title="5：网络信息的查看"></a>5：网络信息的查看</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# ifconfig  #查看服务器的网络信息，其中eth n表示物理网卡，是访问外界的网卡，lo为本地环回网卡，virbr0为kvm虚拟化的网卡</span><br><span class="line">ns33: flags=4163&lt;UP（网卡状态正常）,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.196.137（Ip地址）  netmask 255.255.255.0（子网掩码）  broadcast 192.168.196.255</span><br><span class="line">        inet6 fe80::aa89:e32e:12ea:34c5（ipv6地址）  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:5e:2e:6f  txqueuelen 1000  (Ethernet)（千兆以太网）</span><br><span class="line">        RX packets 424  bytes 42291 (41.2 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 253  bytes 24453 (23.8 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0 #发送接受的数据包</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# ip address  #查看所有ip</span><br><span class="line">[root@Centos-A1 ~]# route -n  #查看路由信息</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         192.168.196.2   0.0.0.0         UG    100    0        0 ens33</span><br><span class="line">192.168.122.0   0.0.0.0         255.255.255.0   U     0      0        0 virbr0</span><br><span class="line">192.168.196.0   0.0.0.0         255.255.255.0   U     100    0        0 ens33</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">0.0.0.0 表示通配所有</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/resolv.conf  查看DNS相关,修改文件仅临时有效，重启失效</span><br><span class="line">[root@Centos-A1 ~]# cat /etc/resolv.conf </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Generated by NetworkManager</span></span><br><span class="line">search localdomain</span><br><span class="line">nameserver 192.168.196.2</span><br></pre></td></tr></table></figure><h2 id="6：网络的配置"><a href="#6：网络的配置" class="headerlink" title="6：网络的配置"></a>6：网络的配置</h2><h4 id="1）ifconfig"><a href="#1）ifconfig" class="headerlink" title="1）ifconfig"></a>1）ifconfig</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# ifconfig  #查看所有激活的网卡</span><br><span class="line">[root@Centos-A1 ~]# ifconfig -a  #查看所有网卡，包含未激活的</span><br><span class="line">[root@Centos-A1 ~]# ifconfig ens33 up/down  #激活/禁用网卡</span><br><span class="line">[root@Centos-A1 ~]# ifconfig ens33 192.168.1.1/24  #设置ip地址与子网掩码，仅临时有效，重启失效，一般用于测试</span><br></pre></td></tr></table></figure><h4 id="2）ip"><a href="#2）ip" class="headerlink" title="2）ip"></a>2）ip</h4><ul><li><p>ip link 管理设备</p><ul><li>&#96;&#96;&#96;shell<br>[root@Centos-A1 ~]# ip link [show] #查看设备信息<br>[root@Centos-A1 ~]# ip link set ens33 up&#x2F;down #设置网卡的激活与禁用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ip address</span><br><span class="line"></span><br><span class="line">  - ```shell</span><br><span class="line">    [root@Centos-A1 ~]# ip address [show] #查看网络地址</span><br><span class="line">    [root@Centos-A1 ~]# ip address add 192.168.196.200/24 dev ens33  #添加第个ip地址</span><br><span class="line">    [root@Centos-A1 ~]# ip address del 192.168.196.200/24 dev ens33  #删除第二个ip地址</span><br></pre></td></tr></table></figure></li></ul></li><li><p>ip route 管理路由表</p><ul><li>&#96;&#96;&#96;shell<br>[root@Centos-A1 ~]# ip route  #查看路由表<br>192.168.122.0&#x2F;24 dev virbr0 proto kernel scope link src 192.168.122.1<br>[root@Centos-A1 ~]# ip route add 172.25.254.110 via 192.168.196.2  #添加路由，ip route add ip地址[&#x2F;掩码] via 网关<br>[root@Centos-A1 ~]# ip route del 172.25.254.110 #删除路由<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 3）NetworkManager</span><br><span class="line"></span><br><span class="line">##### a.nmcli 查看网络配置</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">[root@Centos-A1 ~]# nmtui  #图形化配置界面</span><br><span class="line">[root@Centos-A1 ~]# nmcli  选项 参数  #命令行管理工具</span><br><span class="line">[root@Centos-A1 ~]# nmcli device show    #查看当前设备</span><br><span class="line">[root@Centos-A1 ~]# nmcli device status  #查看设备状态</span><br><span class="line">[root@Centos-A1 ~]# nmcli connection show  #查看网卡配置文件等信息</span><br><span class="line">[root@Centos-A1 ~]# nmcli connection delete ens33[UUID也可以删除]  #删除网卡配置文件，也可以通过UUID删除</span><br><span class="line">成功删除连接 &quot;ens33&quot; (0631f08c-f8b7-4fa2-b387-b77bdfa462dd)。</span><br><span class="line">[root@Centos-A1 ~]# nmcli device connect ens33   #连接网络，如果设备文件存在则激活，不存在则创建并激活</span><br><span class="line">成功用 &quot;ens33bcd74651-785a-376b-833c-eae36a896ce1&quot; 激活了设备 &quot;&quot;。</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="b-nmcli配置网络"><a href="#b-nmcli配置网络" class="headerlink" title="b.nmcli配置网络"></a>b.nmcli配置网络</h5><ol><li><p>首先查看是否存在配置文件</p><ul><li>&#96;&#96;&#96;shell<br>[root@Centos-A1 ~]# nmcli connection shownmcli connection show<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 如果存在配置文件</span><br><span class="line"></span><br><span class="line">   - nmcli connection modify修改配置文件</span><br><span class="line"></span><br><span class="line">3. 不存在配置文件</span><br><span class="line"></span><br><span class="line">   - nmcli connection add 添加配置文件</span><br><span class="line"></span><br><span class="line">4. 配置完成后激活配置文件</span><br><span class="line"></span><br><span class="line">   - nmcli connection up 配置文件名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">[root@Centos-A1 ~]# nmcli connection add type ethernet ifname ens33 con-name ens33 ipv4.method manual ipv4.addresses 192.168.196.200/24 ipv4.gateway 192.168.196.2 ipv4.dns 223.5.5.5 autoconnect yes  #添加配置文件</span><br><span class="line">[root@Centos-A1 ~]# nmcli connection up ens33  #激活网卡</span><br></pre></td></tr></table></figure></li></ul></li></ol><table><thead><tr><th>配置</th><th>含义</th></tr></thead><tbody><tr><td>type ethernet</td><td>类型为以太网</td></tr><tr><td>ifname ens160</td><td>网卡名称&#x2F;设备名</td></tr><tr><td>con-name ens160</td><td>配置文件名称。建议与网卡一致</td></tr><tr><td>ipv4.addresses  192.168.196.128&#x2F;24</td><td>ip地址.掩码</td></tr><tr><td>ipv4.gateway 192.168.196.2</td><td>网关地址</td></tr><tr><td>ipv4.dns 223.3.3.3</td><td>DNS地址</td></tr><tr><td>ipv4.method manual</td><td>手动模式</td></tr><tr><td>autoconnect yes</td><td>开机启动</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# nmcli connection modify ens33 ipv4.method manual ipv4.addresses 192.168.196.210/24  #修改网卡配置文件</span><br><span class="line">[root@Centos-A1 ~]# nmcli connection up ens33 </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# nmcli connection modify ens33 ipv4.method auto autoconnect yes  #设置DNCP自动获取网络</span><br><span class="line">[root@Centos-A1 ~]# nmcli connection up ens33 </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# nmcli connection modify ens33 ipv4.method manual +ipv4.addresses 192.168.196.100/24  #添加第二个ip地址</span><br><span class="line">[root@Centos-A1 ~]# nmcli connection up ens33 </span><br><span class="line">[root@Centos-A1 ~]# ip address  #验证</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# nmcli connection modify ens33 ipv4.method manual -ipv4.addresses 192.168.196.100/24 #删除一个ip地址</span><br><span class="line">[root@Centos-A1 ~]# nmcli connection up ens33 </span><br><span class="line">[root@Centos-A1 ~]# ip addr</span><br></pre></td></tr></table></figure><p>如果手动修改了ifconfig-ens160文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@locathost ~]<span class="comment"># nmcli connection reload  //首先需要将硬盘上的文件读取到系统配置中</span></span><br><span class="line">[root@locathost ~]<span class="comment"># nmcli connection up ens160 //激活网卡</span></span><br></pre></td></tr></table></figure><h2 id="7：双网卡绑定与桥接"><a href="#7：双网卡绑定与桥接" class="headerlink" title="7：双网卡绑定与桥接"></a>7：双网卡绑定与桥接</h2><h3 id="1）双网卡绑定"><a href="#1）双网卡绑定" class="headerlink" title="1）双网卡绑定"></a>1）双网卡绑定</h3><table><thead><tr><th>bond级别</th><th>bond名称</th><th>bond特点</th><th>对交换机的要求</th></tr></thead><tbody><tr><td>0</td><td>round-robin</td><td>按照设备顺序依次传输数据包，提供负载均衡和容错能录</td><td>需要配置trunking</td></tr><tr><td>1</td><td>active-backup</td><td>只有一个设备处理数据，当发生故障时，则会启用备份，仅提供容错能力</td><td>不需要配置</td></tr><tr><td>2</td><td>load-balancin（xor）</td><td>根据MAC地址异或运算的结果来传输设备，提供负载均衡和容错能力</td><td>交换机需要配置trunking</td></tr><tr><td>3</td><td>fault-tolerance(broadcast)</td><td>通过全部设备来传输所有数据，提供容错能力</td><td>交换机需要配置trunking</td></tr><tr><td>4</td><td>lacp</td><td>通过创建聚合组来共享相同的传输速度，需要交换机也支持802.3ad模式，提供容错能力</td><td>需要交换机支持802.3d、交换机需要配置<br/>trunking</td></tr><tr><td>5</td><td>transmit loadbalancing</td><td>由负载最轻的网口发送，由当前使用的网口接收。提供负载均衡和容错能力。</td><td>交换机不需要配置</td></tr><tr><td>6</td><td>adaptive loadbalancing</td><td>用负载最轻的网口进行发送和接收。提供负载均衡和容错能力。</td><td>交换机不需要配置</td></tr></tbody></table><p>双网卡绑定主要是为了保证业务能够正常运行，即当一块网卡down的时候，切换到另一块网卡（主备模式），保证业务运行</p><p>首先添加第二块网卡设备给虚拟机，编辑虚拟机设置–&gt;添加–&gt;网络适配器–&gt;完成–&gt;确定</p><p>两张网卡的模式保持一致，NAT或者仅主机模式都可以验证</p><p><img src="/img/image-20220907194432097.png" alt="image-20220907194432097"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# ifconfig  #查看添加的网卡的设备名</span><br></pre></td></tr></table></figure><p><img src="/img/image-20220907194748424.png" alt="image-20220907194748424"></p><p>查看配置文件，并删除需要双网卡绑定的两块设备的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# nmcli connection show</span><br><span class="line">NAME        UUID                                  TYPE      DEVICE </span><br><span class="line">有线连接 1  5d005beb-95f7-31e0-b445-6412592220a7  ethernet  ens36  </span><br><span class="line">virbr0      9a986ed9-ea24-4571-ac27-2b6dc5324250  bridge    virbr0 </span><br><span class="line">[root@Centos-A1 ~]# nmcli connection delete ens33 </span><br><span class="line">成功删除连接 &quot;ens33&quot; (bd003090-bea5-4f16-8c80-6eb50336db06)。</span><br><span class="line">[root@Centos-A1 ~]# nmcli connection delete 5d005beb-95f7-31e0-b445-6412592220a7 </span><br><span class="line">成功删除连接 &quot;有线连接 1&quot; (5d005beb-95f7-31e0-b445-6412592220a7)。</span><br></pre></td></tr></table></figure><ul><li><p>创建虚拟接口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# nmcli connection add type bond ifname bond0 con-name bond0 mode active-backup miimon 1000</span><br><span class="line">连接 &quot;bond0&quot; (b70ed4cc-c233-42e8-840b-eb9d9eff7159) 已成功添加。</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">miimon 1000，表示每隔1000ms检查一下网络的连通性</span></span><br></pre></td></tr></table></figure></li><li><p>将两张物理网卡与虚拟网卡进行绑定</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@Centos-A1 ~]# nmcli connection add type ethernet slave-type bond ifname ens33 con-name ens33 master bond0 </span><br><span class="line">连接 &quot;ens33&quot; (a45a9a27-f126-4465-8939-6b763d66d7e5) 已成功添加。</span><br><span class="line">[root@Centos-A1 ~]# nmcli connection add type ethernet slave-type bond ifname ens36 con-name ens36 master bond0 </span><br><span class="line">连接 &quot;ens36&quot; (6166c594-fb5f-49ea-8db8-d3c6beb1e51e) 已成功添加。</span><br></pre></td></tr></table></figure><p>查看配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# nmcli connection show</span><br></pre></td></tr></table></figure><p><img src="/img/image-20220907195503757.png" alt="image-20220907195503757"></p></li><li><p>配置bond0的相关地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# nmcli connection modify bond0 ipv4.method manual ipv4.addresses 192.168.196.100/24 ipv4.gateway 192.168.196.2 ipv4.dns 223.5.5.5 autoconnect yes </span><br><span class="line">[root@Centos-A1 ~]# nmcli connection up bond0  #激活bond0</span><br></pre></td></tr></table></figure></li><li><p>查看bond0的相关信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# cat /proc/net/bonding/bond0 </span><br></pre></td></tr></table></figure></li><li><p>使用windows终端cmd 进行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\sweetheart&gt;ping 192.168.196.100  -t</span><br></pre></td></tr></table></figure></li></ul><p><img src="/img/image-20220907195946090.png" alt="image-20220907195946090"></p><p>在虚拟机控制台右键，可移动设备，将两块网卡分别断开，可以查看到数据包有短暂的连通失败后又恢复正常，从而保障业务的正常运行</p><h3 id="2）网桥"><a href="#2）网桥" class="headerlink" title="2）网桥"></a>2）网桥</h3><p>网桥即虚拟交换机</p><p>如果上面做了双网卡绑定的实验，建议删除配置后在进行网桥的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# nmcli connection delete ens33</span><br><span class="line">[root@Centos-A1 ~]# nmcli connection delete ens36</span><br><span class="line">[root@Centos-A1 ~]# nmcli connection delete bond0</span><br><span class="line">[root@Centos-A1 ~]# nmcli connection show  #再次查看配置</span><br></pre></td></tr></table></figure><ul><li><p>创建网桥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# nmcli connection add type bridge ifname br0 con-name br0 autoconnect yes </span><br></pre></td></tr></table></figure></li><li><p>绑定网桥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# nmcli connection add type ethernet slave-type bridge ifname ens33 con-name ens33 master br0 </span><br></pre></td></tr></table></figure></li><li><p>配置网桥地址并激活（一般不用配置，此处为了测试）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# nmcli connection modify br0 ipv4.method manual ipv4.addresses 192.168.196.200/24</span><br><span class="line">[root@Centos-A1 ~]# nmcli connection up br0 </span><br></pre></td></tr></table></figure><p>网桥生效需要一定的时间，如果没通请等待几分钟在进行测试</p></li></ul><p>即测试成功</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos-chrony时间同步服务</title>
      <link href="/2022/09/08/chrony/"/>
      <url>/2022/09/08/chrony/</url>
      
        <content type="html"><![CDATA[<h2 id="1：安装chrony软件包"><a href="#1：安装chrony软件包" class="headerlink" title="1：安装chrony软件包"></a>1：安装chrony软件包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos-a2 ~]# yum install chrony  #安装chrony服务，需要保证镜像源可用</span><br><span class="line">[root@centos-a2 ~]# rpm -ql chrony| grep chrony.conf  #查找chrony的配置文件所在位置</span><br></pre></td></tr></table></figure><h2 id="2：修改配置文件"><a href="#2：修改配置文件" class="headerlink" title="2：修改配置文件"></a>2：修改配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos-a2 ~]# vim /etc/chrony.conf #修改配置文件</span><br><span class="line">server 时间服务器地址 iburst</span><br><span class="line">[root@centos-a2 ~]# systemctl restart chronyd.service  #重启时间服务</span><br><span class="line">[root@centos-a2 ~]# chronyc sources  #同步时间，chrony同步时间有一个周期，因此可能需要等待一会儿才能够同步成功，为*则表示同步成功</span><br></pre></td></tr></table></figure><p><img src="/img/image-20220908104258144.png" alt="image-20220908104258144"></p><p>同步成功</p><p><img src="/img/image-20220908104354491.png" alt="image-20220908104354491"></p><p>配置文件&#x2F;etc&#x2F;chrony.conf部分参数说明</p><ul><li>server ntp.aliyun.com iburst指定上层时间服务器地址</li><li>allow 192.168.0.0&#x2F;16允许谁向本机同步时间</li><li>local stratum 10 不向任何时间服务器同步，本机作为时间源查看同步时间源</li><li>chronyc sources -v查看时间同步源状态</li><li>chronyc tracking显示系统时间的参数信息</li></ul><p><code>可以使用chrony 将本机作为网络上时间服务器的客户端，和网络上的时间服务器保持一致，自动同步</code></p><p><code>可以使用chrony 将本机作为上层时间服务器，提供时间同步服务向网络上的服务器提供时间校正服务</code></p><h2 id="3：本机作为时间服务器"><a href="#3：本机作为时间服务器" class="headerlink" title="3：本机作为时间服务器"></a>3：本机作为时间服务器</h2><p>对外提供时间同步服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">放行防火墙</span><br><span class="line">[root@centos-a2 ~]# firewall-cmd --permanent --add-service=ntp </span><br><span class="line">success</span><br><span class="line">[root@centos-a2 ~]# firewall-cmd --reload </span><br><span class="line">success</span><br></pre></td></tr></table></figure><p>开启选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos-a2 ~]# vim /etc/chrony.conf  #修改配置文件</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Allow NTP client access from <span class="built_in">local</span> network.</span></span><br><span class="line">allow 192.168.196.0/24   #允许向本机同步时间的网段</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Serve time even <span class="keyword">if</span> not synchronized to a time <span class="built_in">source</span>.</span></span><br><span class="line">local stratum 10  #如果本机向网络时间源同步，同时也在向其他服务器提供时间服务，则开启，如果本机没有向上层服务器同步时间，将自己作为时间源可不用开启</span><br><span class="line">root@centos-a2 ~]# systemctl restart chronyd.service </span><br></pre></td></tr></table></figure><p><img src="/img/image-20220908105925184.png" alt="image-20220908105925184"></p><p>Centos-A1修改chrony.conf配置文件，添加Centos-A2时间服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Centos-A1 ~]# systemctl restart chronyd.service #重启服务</span><br></pre></td></tr></table></figure><p><img src="/img/image-20220908105626933.png" alt="image-20220908105626933"></p><p>时间同步成功</p><p><img src="/img/image-20220908110311031.png" alt="image-20220908110311031"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言-指针与结构体</title>
      <link href="/2022/08/29/%E6%8C%87%E9%92%88%E4%B8%8E%E7%BB%93%E6%9E%84%E4%BD%93/"/>
      <url>/2022/08/29/%E6%8C%87%E9%92%88%E4%B8%8E%E7%BB%93%E6%9E%84%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h2 id="1：指针"><a href="#1：指针" class="headerlink" title="1：指针"></a>1：指针</h2><p>32位：—32根地址线—物理线—通电–产生1&#x2F;0</p><p>将电信号转换成数字信号：1和0组成的二进制序列</p><p>Bit–Byte–Kb–MB–GB–TB–PB</p><p>内存单元：2*32次方个内存单元</p><p>bit &#x2F; 8&#x3D;Byte，Byte &#x2F;1024 &#x3D;Kb,  MB &#x2F; 1024 &#x3D;MB, MB &#x2F; 1024 &#x3D; GB</p><p>char &#x3D;1byte  &#x3D;8 bit &#x3D;8 个地址</p><p><code>最终一个内存单元还是一个字节</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>; <span class="comment">//a在内存中要分配的空间 --4个字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;a); <span class="comment">//用来打印地址  </span></span><br><span class="line"><span class="type">int</span> * pa = &amp;a; <span class="comment">//pa用来存放地址，在c语言中pa叫指针变量</span></span><br><span class="line"><span class="comment">//*说明是pa的指针变量</span></span><br><span class="line"><span class="comment">// int说明pa执行的对象是int类型</span></span><br><span class="line"><span class="type">char</span> ch = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line"><span class="type">char</span> * pc = &amp;ch;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* pa = &amp;a;</span><br><span class="line">*pa = <span class="number">20</span>; <span class="comment">//*解引用操作， *pa就是通过pa里边的地址，找到a</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);   <span class="comment">//结果为20</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指针的大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">short</span>*));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>*));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">long</span>*));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">long</span>*));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">float</span>*));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">double</span>*));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对于32位平台，结果为4</span></span><br><span class="line"><span class="comment">//对于64位平台，结果为8</span></span><br></pre></td></tr></table></figure><p>指针需要多大的空间，取决于地址的存储需要多大空间</p><h2 id="2：结构体"><a href="#2：结构体" class="headerlink" title="2：结构体"></a>2：结构体</h2><p>结构体是C语言中特别重要的知识点，结构体使得C语言有能力描述复杂类型。</p><p>结构体可以让c语言创建新的类型出来</p><p>​<code>struct：结构体类型</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span>  //创建一个学生</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">double</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct Book   //创建一个书的类型</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">char  name[20];  //成员变量</span></span><br><span class="line"><span class="comment">float price;</span></span><br><span class="line"><span class="comment">char id[30];</span></span><br><span class="line"><span class="comment">&#125;;  */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s</span>=</span>&#123;<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>,<span class="number">85.5</span>&#125;;  <span class="comment">// 结构体的创建和初始化</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1: %s %d %lf\n&quot;</span>,s.name,s.age,s.score);  <span class="comment">//结构体变量，成员变量，lf打印双精度浮点数</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> * <span class="title">ps</span> =</span> &amp;s;  <span class="comment">//存储变量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2: %s %d %lf\n&quot;</span>,(*ps).name,(*ps).age,(*ps).score);  <span class="comment">//解引用变量，使用变量进行引用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3: %s %d %lf\n&quot;</span>,ps-&gt;name,ps-&gt;age,ps-&gt;score);  <span class="comment">//使用变量，利用-&gt;操作符进行引用,左边为结构体指针-&gt;成员变量名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c-learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 c-learning </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
